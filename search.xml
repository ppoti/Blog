<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Git常用命令与配置</title>
      <link href="/2018/04/25/git/git/"/>
      <url>/2018/04/25/git/git/</url>
      <content type="html"><![CDATA[<p>一，配置私钥</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"user"</span>    <span class="comment">//设置名字</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span> <span class="string">"user@qq.com"</span>  <span class="comment">//设置邮箱  </span></span><br><span class="line">ssh-keygen -t rsa -C  <span class="comment">//三次回车即可生成 ssh key</span></span><br><span class="line">ssh-keygen  <span class="comment">//不同平台可以使用这个 ssh key</span></span><br><span class="line">cat ~/.ssh/id_rsa<span class="selector-class">.pub</span>  <span class="comment">//查看你的 public key</span></span><br></pre></td></tr></table></figure><hr><p>二，在gitee，coding，github添加你的key和ssh</p><ul><li>添加方法大同小异 个人 -&gt; 设置 -&gt; SSH 公钥 输入标题，以及public key，确认即可。</li></ul><hr><p>三，git和gitee项目关联</p><p>  提交仓库</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> . <span class="comment">//提交所有 </span></span><br><span class="line">git <span class="keyword">add</span> <span class="string">''</span>  <span class="comment">//提交单个</span></span><br><span class="line">git commit -m <span class="string">"first"</span>  <span class="comment">//提交时候设置的版本号</span></span><br><span class="line">git push <span class="comment">//提交 git push origin master</span></span><br><span class="line">git remote <span class="keyword">add</span> origin +<span class="string">"仓库地址"</span></span><br><span class="line">git remote -v <span class="comment">//查询权限</span></span><br><span class="line">git push --force origin master <span class="comment">//替换当前</span></span><br></pre></td></tr></table></figure><p>  提取仓库</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">//第一次拉取代码</span></span><br><span class="line"><span class="title">git</span> pull // 拉取代码 </span><br><span class="line">git fetch --all //下载远程的库</span><br><span class="line">git reset --hard origin/<span class="keyword">master</span> <span class="title">//强制与master</span>覆盖</span><br></pre></td></tr></table></figure><p>  分支</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch ''    <span class="comment">//新建分支</span></span><br><span class="line">git checkout ''  <span class="comment">//切换分支</span></span><br><span class="line">git pull    <span class="comment">//拉取分支到本地开发</span></span><br><span class="line">git branch   <span class="comment">//查看当前分支</span></span><br><span class="line">git branch -D '' <span class="comment">//删除分支</span></span><br><span class="line">git add . <span class="meta">&amp;&amp; git commit -m 'cont' &amp;&amp; git push  <span class="comment">//切换到分支,再提交内容，</span></span></span><br><span class="line">git checkout master <span class="meta">&amp;&amp; git merge origin/分支名 &amp;&amp; git push 切换到主分支,再合并分支</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo静态资源博客搭建</title>
      <link href="/2018/04/25/hexo/hexo/"/>
      <url>/2018/04/25/hexo/hexo/</url>
      <content type="html"><![CDATA[<p>一，hexo install 安装<br>    安装好Git Nodejs<br>    通过git 安装hexo及常用命令</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g  <span class="comment">//安装Hexo</span></span><br><span class="line">hexo -v  <span class="comment">//检查hexo是否安装成功</span></span><br><span class="line">hexo init 'blog'<span class="comment">//初始化该文件夹 cd blog</span></span><br><span class="line">npm install <span class="comment">//安装所需要的组件</span></span><br><span class="line">hexo server <span class="comment">//开启服务器 简写hexo s</span></span><br><span class="line">hexo <span class="keyword">generate</span>  <span class="comment">//生成静态网页 简写hexo g</span></span><br><span class="line">hexo deploy <span class="comment">//开始部署coding、github  简写hexo d</span></span><br><span class="line">hexo s --debug <span class="comment">//调试模式</span></span><br><span class="line">hexo <span class="keyword">new</span> title <span class="comment">//创建一篇新文章</span></span><br><span class="line">hexo clean &amp;&amp; hexo <span class="keyword">generate</span> &amp;&amp; hexo deploy <span class="comment">//一键清除，生成，部署</span></span><br></pre></td></tr></table></figure><hr><p>二，部署配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: <span class="comment">//键值 : 后面带空格</span></span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: </span><br><span class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:xxx/Blog.git,master</span><br><span class="line">    <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:xxx/Blog.git,master</span><br></pre></td></tr></table></figure><hr><p>三，线上加载错乱的路径设置<br>github路径是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxx/Blog.git<br>在根目录设置root: /Blog/<br>一级域名，则不用</p><p>至于主题，个人喜欢折腾个自己喜欢的，next也不错，功能丰富，就是UI不够细致</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>some()检测数组</title>
      <link href="/2018/02/21/javascript/array/some/"/>
      <url>/2018/02/21/javascript/array/some/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>some()方法对数组中的每一项元素执行给定函数，如果该函数对任何一项返回 true，则返回 true，否则返回 false。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">some</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：</p><p>some()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为some()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>some()方法的 callback 回调函数需要有返回值，这个返回值不必明确是布尔值类型 true 或 false。如果 callback 没有返回值，则视为返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item) &#125;);  <span class="comment">// 返回false。 打印 1 2 3 4 5</span></span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &#125;);        <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);    <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item == <span class="literal">undefined</span> &#125;)  <span class="comment">// false</span></span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &gt; <span class="number">0</span> &#125;)           <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>some()方法的返回值为Boolean类型，将原数组中的每个元素都按顺序执行一次 callback 函数，只要有任何一项元素执行结果返回 true，则some()方法返回 true。如果所有元素都返回 false，some()方法返回 false。</p><p>some()不会改变原数组。</p><p>some()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用some()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是some()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测数组中是否有元素大于等于 10</span></span><br><span class="line">function isBigEnough(element, index, array) &#123;</span><br><span class="line">  return (element &gt;= <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var passed = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>].some(isBigEnough);</span><br><span class="line">console.log(passed);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var passed1 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].some(isBigEnough);</span><br><span class="line">console.log(passed1);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.some)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.some = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">'function'</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t &amp;&amp; fun.call(thisArg, t[i], i, t))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reduceRight()倒序迭代</title>
      <link href="/2018/02/20/javascript/array/reduceRight/"/>
      <url>/2018/02/20/javascript/array/reduceRight/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>reduceRight()方法对数组中的每个元素（从右到左）开始执行给定函数，构建一个最终返回值。。reduceRight()方法和reduce()的执行方向相反。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.reduceRight(callback, initialValue)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="function"><span class="keyword">Function</span></span>类型对每个数组元素执行的回调函数。</span><br><span class="line">initialValue可选/任意类型作为首次调用 callback 的第一个参数。</span><br></pre></td></tr></table></figure><p>reduceRight()方法中的 callback 回调函数默认支持 4 个参数。</p><p>第 1 个(previousValue)： 上一次执行 callback 的返回值；<br>第 2 个(currentValue): 数组中当前被处理的元素；<br>第 3 个(index)： 当前被处理元素的索引值；<br>第 4 个(array)： 调用reduceRight()方法的数组本身。</p><p>首次执行 callback 函数时，如果指定了 initialValue ，则使用 initialValue 作为 callback 的第一个参数(previousValue)，数组中最后一个元素作为第二个参数(currentValue)；如果没指定 initialValue，则用数组的最后一个元素作为 previousValue，倒数第二个元素作为 currentValue。</p><p>如果数组为空并且没有提供 initialValue， 会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供 initialValue， 或者有提供 initialValue 但是数组为空，那么此唯一值将被返回并且callback不会被执行。</p><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">String</span>(pre) + <span class="built_in">String</span>(cur) &#125;)  <span class="comment">// "65421"</span></span><br></pre></td></tr></table></figure><p>每次的参数和返回值如下表：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index       array            return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">6</span>         <span class="number">5</span>     <span class="number">5</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">65</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">65</span>        <span class="number">4</span>     <span class="number">3</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">654</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">654</span>       <span class="number">2</span>     <span class="number">1</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">6542</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">6542</span>      <span class="number">1</span>     <span class="number">0</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">65421</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>reduceRight()方法的返回值为任意类型，从数组的最后一项开始，逐个遍历到第一个，由 callback 回调函数构建一个最终返回值。</p><p>reduceRight()不会改变原数组。</p><p><strong>示例</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduceRight(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123; <span class="keyword">return</span> a + b &#125;);     <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">迭代历程  previous current index   array  return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">4</span>         <span class="number">3</span>     <span class="number">3</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">7</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">7</span>         <span class="number">2</span>     <span class="number">2</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">9</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">9</span>         <span class="number">1</span>     <span class="number">1</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">10</span>        <span class="number">0</span>     <span class="number">0</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br></pre></td></tr></table></figure><p>给reduceRight()传入第二个参数 10 。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduceRight(function(a, b) &#123; return a + b &#125;, <span class="number">10</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index   array   return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">10</span>         <span class="number">4</span>     <span class="number">4</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">14</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">14</span>         <span class="number">3</span>     <span class="number">3</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">17</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">17</span>         <span class="number">2</span>     <span class="number">2</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">19</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">19</span>         <span class="number">1</span>     <span class="number">1</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">20</span></span><br><span class="line">第<span class="number">5</span>次调用     <span class="number">20</span>         <span class="number">0</span>     <span class="number">0</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">20</span></span><br></pre></td></tr></table></figure><p>将数组扁平化。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var flattened = <span class="string">[[0, 1], [2, 3], [4, 5]]</span>.reduceRight(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">concat</span>(b);</span><br><span class="line">&#125;);</span><br><span class="line">// flattened 为 [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previousValue  currentValue  index  array        return value</span><br><span class="line">第<span class="number">1</span>次调用    [<span class="number">4</span>, <span class="number">5</span>]         [<span class="number">2</span>, <span class="number">3</span>]       <span class="number">1</span>   [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">第<span class="number">2</span>次调用  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]     [<span class="number">0</span>, <span class="number">1</span>]       <span class="number">0</span>   [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> ( <span class="string">'function'</span> !== <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.reduceRight ) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.reduceRight = <span class="function"><span class="keyword">function</span>(<span class="params"> callback <span class="regexp">/*, initialValue*/</span> </span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">null</span> === <span class="keyword">this</span> || <span class="string">'undefined'</span> === <span class="keyword">typeof</span> <span class="keyword">this</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">         <span class="string">'Array.prototype.reduce called on null or undefined'</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">'function'</span> !== <span class="keyword">typeof</span> callback ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( callback + <span class="string">' is not a function'</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>( <span class="keyword">this</span> ), len = t.length &gt;&gt;&gt; <span class="number">0</span>, k = len - <span class="number">1</span>, value;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ) &#123;</span><br><span class="line">      value = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> ( k &gt;= <span class="number">0</span> &amp;&amp; ! k <span class="keyword">in</span> t ) k--;</span><br><span class="line">      <span class="keyword">if</span> ( k &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</span><br><span class="line">      value = t[ k-- ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( ; k &gt;= <span class="number">0</span> ; k-- ) &#123;</span><br><span class="line">      <span class="keyword">if</span> ( k <span class="keyword">in</span> t ) &#123;</span><br><span class="line">         value = callback( value, t[k], k, t );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reduce()迭代数组</title>
      <link href="/2018/02/19/javascript/array/reduce/"/>
      <url>/2018/02/19/javascript/array/reduce/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>reduce()方法对数组中的每个元素（从左到右）开始执行给定函数，构建一个最终返回值。reduce()是所有数组方法中最为复杂的一个。</p><p><strong>语法</strong></p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">reduce</span>(callback, initialValue)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="function"><span class="keyword">Function</span></span>类型对每个数组元素执行的回调函数。</span><br><span class="line">initialValue可选/任意类型作为首次调用 callback 的第一个参数。</span><br></pre></td></tr></table></figure><p>reduce()方法中的 callback 回调函数默认支持 4 个参数。</p><p>第 1 个(previousValue)： 上一次执行 callback 的返回值；<br>第 2 个(currentValue): 数组中当前被处理的元素；<br>第 3 个(index)： 当前被处理元素的索引值；<br>第 4 个(array)： 调用reduce()方法的数组本身。</p><p>首次执行 callback 函数时，如果指定了 initialValue ，则使用 initialValue 作为 callback 的第一个参数(previousValue)，数组中第一个元素作为第二个参数(currentValue)；如果没指定 initialValue，则用数组的第一个元素作为 previousValue，第二个元素作为 currentValue。</p><p>如果数组为空并且没有提供 initialValue， 会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供 initialValue， 或者有提供 initialValue 但是数组为空，那么此唯一值将被返回并且callback不会被执行。</p><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">String</span>(pre) + <span class="built_in">String</span>(cur) &#125;);  <span class="comment">// "12456"</span></span><br></pre></td></tr></table></figure><p>每次的参数和返回值如下表：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index       array            return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">1</span>         <span class="number">2</span>     <span class="number">1</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">12</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">12</span>        <span class="number">4</span>     <span class="number">3</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">124</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">124</span>       <span class="number">5</span>     <span class="number">4</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">1245</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">1245</span>      <span class="number">6</span>     <span class="number">5</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">12456</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>reduce()方法的返回值为任意类型，从数组的第一项开始，逐个遍历到最后，由 callback 函数构建一个最终返回值。</p><p>reduce()不会改变原数组。</p><p><strong>示例</strong></p><pre><code>var total = [0, 1, 2, 3, 4].reduce(function(a, b) { return a + b });     // 10</code></pre><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">迭代历程  previous current index       array    return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">0</span>         <span class="number">1</span>     <span class="number">1</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">1</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">1</span>         <span class="number">2</span>     <span class="number">2</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">3</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">3</span>         <span class="number">3</span>     <span class="number">3</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">6</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">6</span>         <span class="number">4</span>     <span class="number">4</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br></pre></td></tr></table></figure><p>给reduce()传入第二个参数 10 。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(function(a, b) &#123; return a + b &#125;, <span class="number">10</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index  array    return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">10</span>        <span class="number">0</span>     <span class="number">0</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">10</span>        <span class="number">1</span>     <span class="number">1</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">11</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">11</span>        <span class="number">2</span>     <span class="number">2</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">13</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">13</span>        <span class="number">3</span>     <span class="number">3</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">16</span></span><br><span class="line">第<span class="number">5</span>次调用     <span class="number">16</span>        <span class="number">4</span>     <span class="number">4</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">20</span></span><br></pre></td></tr></table></figure><p>将数组扁平化。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var flattened = <span class="string">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">concat</span>(b);</span><br><span class="line">&#125;);</span><br><span class="line">// flattened 为 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">迭代历程previousValuecurrentValueindexarrayreturn value</span><br><span class="line">第<span class="number">1</span>次调用   [<span class="number">0</span>, <span class="number">1</span>]          [<span class="number">2</span>, <span class="number">3</span>]          <span class="number">1</span>    [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">第<span class="number">2</span>次调用   [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    [<span class="number">4</span>, <span class="number">5</span>]          <span class="number">2</span>    [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'function'</span> !== <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.reduce) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, opt_initialValue</span>)</span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">this</span> || <span class="string">'undefined'</span> === <span class="keyword">typeof</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">// At the moment all modern browsers, that support strict mode, have</span></span><br><span class="line">      <span class="comment">// native implementation of Array.prototype.reduce. For instance, IE8</span></span><br><span class="line">      <span class="comment">// does not support strict mode, so this check is actually useless.</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">          <span class="string">'Array.prototype.reduce called on null or undefined'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'function'</span> !== <span class="keyword">typeof</span> callback) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">' is not a function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> index, value,</span><br><span class="line">        length = <span class="keyword">this</span>.length &gt;&gt;&gt; <span class="number">0</span>,</span><br><span class="line">        isValueSet = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">      value = opt_initialValue;</span><br><span class="line">      isValueSet = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; length &gt; index; ++index) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.hasOwnProperty(index)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValueSet) &#123;</span><br><span class="line">          value = callback(value, <span class="keyword">this</span>[index], index, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          value = <span class="keyword">this</span>[index];</span><br><span class="line">          isValueSet = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isValueSet) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>isArray()是否为数组</title>
      <link href="/2018/02/18/javascript/array/isArray/"/>
      <url>/2018/02/18/javascript/array/isArray/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>Array.isArray()方法用来判断某个值是否为数组。如果是，返回 true，否则返回 false。</p><p><strong>语法</strong></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.<span class="built_in">isArray</span>(value)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">value</span>任意类型需要被检测的值。</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>Array.isArray()方法的返回值为Boolean类型，被检测的值为数组返回 true，不是数组返回 false。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>indexOf()查找元素第一次的索引</title>
      <link href="/2018/02/17/javascript/array/indexOf/"/>
      <url>/2018/02/17/javascript/array/indexOf/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>indexOf()方法用于查找给定元素在当前数组中第一次出现的位置。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.indexOf(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchElement任意类型要在数组中查找的元素。</span><br><span class="line">fromIndex可选/<span class="built_in">Number</span>类型 指定从数组中开始查找的索引位置。</span><br></pre></td></tr></table></figure><p>注意：</p><p>如果 fromIndex 的值大于数组长度，则意味不在数组中查找，返回 -1。<br>如果 fromIndex 为负值，则表示从数组中的倒数第几个元素开始查找，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。为负值时可视为length + start，此处length为数组的长度。</p><p><strong>返回值</strong></p><p>indexOf()方法的返回值为Number类型，返回给定元素在数组中第一次被查找到的索引值，如果没有找到则返回 -1 。</p><p>注意：<br>indexOf()方法使用严格等于(“===”)判断 searchElement 与数组中元素之间的等于关系。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>);       <span class="comment">// 0</span></span><br><span class="line">array.indexOf(<span class="number">7</span>);       <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">2</span>);    <span class="comment">// 2</span></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-1</span>);   <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-3</span>);   <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="comment">// Production steps of ECMA-262, Edition 5, 15.4.4.14</span></span><br><span class="line"><span class="comment">// Reference: http://es5.github.io/#x15.4.4.14</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">searchElement, fromIndex</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Let O be the result of calling ToObject passing</span></span><br><span class="line">    <span class="comment">//    the this value as the argument.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"this" is null or not defined'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Let lenValue be the result of calling the Get</span></span><br><span class="line">    <span class="comment">//    internal method of O with the argument "length".</span></span><br><span class="line">    <span class="comment">// 3. Let len be ToUint32(lenValue).</span></span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. If len is 0, return -1.</span></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. If argument fromIndex was passed let n be</span></span><br><span class="line">    <span class="comment">//    ToInteger(fromIndex); else let n be 0.</span></span><br><span class="line">    <span class="keyword">var</span> n = +fromIndex || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(n) === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">      n = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. If n &gt;= len, return -1.</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= len) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. If n &gt;= 0, then Let k be n.</span></span><br><span class="line">    <span class="comment">// 8. Else, n&lt;0, Let k be len - abs(n).</span></span><br><span class="line">    <span class="comment">//    If k is less than 0, then let k be 0.</span></span><br><span class="line">    k = <span class="built_in">Math</span>.max(n &gt;= <span class="number">0</span> ? n : len - <span class="built_in">Math</span>.abs(n), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. Repeat, while k &lt; len</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line">      <span class="comment">// a. Let Pk be ToString(k).</span></span><br><span class="line">      <span class="comment">//   This is implicit for LHS operands of the in operator</span></span><br><span class="line">      <span class="comment">// b. Let kPresent be the result of calling the</span></span><br><span class="line">      <span class="comment">//    HasProperty internal method of O with argument Pk.</span></span><br><span class="line">      <span class="comment">//   This step can be combined with c</span></span><br><span class="line">      <span class="comment">// c. If kPresent is true, then</span></span><br><span class="line">      <span class="comment">//    i.  Let elementK be the result of calling the Get</span></span><br><span class="line">      <span class="comment">//        internal method of O with the argument ToString(k).</span></span><br><span class="line">      <span class="comment">//   ii.  Let same be the result of applying the</span></span><br><span class="line">      <span class="comment">//        Strict Equality Comparison Algorithm to</span></span><br><span class="line">      <span class="comment">//        searchElement and elementK.</span></span><br><span class="line">      <span class="comment">//  iii.  If same is true, return k.</span></span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O &amp;&amp; O[k] === searchElement) &#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">      &#125;</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>map()返回新数组</title>
      <link href="/2018/02/16/javascript/array/map/"/>
      <url>/2018/02/16/javascript/array/map/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>map()方法返回一个由原数组中每个元素执行给定函数的返回值组成的新数组。</p><p><strong>语法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">map</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：</p><p>map()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为map()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>map()的 callback 函数需要有返回值，这些返回值组成新数组作为map()方法的返回值。如果回调函数没有返回值，则视为返回undefined。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.map(<span class="keyword">function</span>(item)&#123; <span class="built_in">console</span>.log(item) &#125;);</span><br><span class="line"><span class="regexp">//打印 0 1 2 3 4 5 //</span> arr1为[<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="regexp">//</span>  [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">arr.map(function(item)&#123; <span class="keyword">return</span> Boolean(item) &#125;)  <span class="regexp">//</span> [<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">undefined</span> × <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>map()方法的返回值为Array类型，对数组中的每个元素都按顺序执行一次 callback 函数，将每次执行 callback 的返回值组成一个新数组。这个新书组就是map()方法的返回值。</p><p>map()不会改变原数组。</p><p>map()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用map()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是map()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对数组中每个元素求平方</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrayOSquares = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item * item &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrayOSquares)       <span class="comment">// [1, 25, 64, 9, 16]</span></span><br></pre></td></tr></table></figure><p>一般情况下，map()方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着map()只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].<span class="built_in">map</span>(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 你可能觉的会是 [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 但实际的结果是 [1, NaN, NaN]</span></span><br></pre></td></tr></table></figure><p>通常使用parseInt()方法时，只需要传递一个参数。但实际上parseInt()可以有两个参数。第二个参数是进制数。可以通过语句”alert(parseInt.length)===2”来验证。map()方法在调用 callback 函数时，会给它传递三个参数：当前正在遍历的元素, 元素索引, 原数组本身。第三个参数parseInt()会忽视, 但第二个参数不会，也就是说，parseInt()把传过来的索引值当成进制数来使用。从而返回了NaN。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1"</span>,<span class="number">0</span>)   <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"2"</span>,<span class="number">1</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"3"</span>,<span class="number">2</span>)   <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, <span class="number">10</span>) &#125;);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 ECMA-262, Edition 5, 15.4.4.19</span></span><br><span class="line"><span class="comment">// 参考: http://es5.github.com/#x15.4.4.19</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.map) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> T, A, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">" this is null or not defined"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将O赋值为调用map方法的数组.</span></span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.将len赋值为数组O的长度.</span></span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果callback不是函数,则抛出TypeError异常.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(callback) != <span class="string">"[object Function]"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">" is not a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 如果参数thisArg有值,则将T赋值为thisArg;否则T为undefined.</span></span><br><span class="line">    <span class="keyword">if</span> (thisArg) &#123;</span><br><span class="line">      T = thisArg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 创建新数组A,长度为原数组O长度len</span></span><br><span class="line">    A = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 将k赋值为0</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 当 k &lt; len 时,执行循环.</span></span><br><span class="line">    <span class="keyword">while</span>(k &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> kValue, mappedValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历O,k为原数组索引</span></span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//kValue为索引k对应的值.</span></span><br><span class="line">        kValue = O[ k ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行callback,this指向T,参数有三个.分别是kValue:值,k:索引,O:原数组.</span></span><br><span class="line">        mappedValue = callback.call(T, kValue, k, O);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回值添加到新数组A中.</span></span><br><span class="line">        A[ k ] = mappedValue;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// k自增1</span></span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 返回新数组A</span></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lastIndexOf()查找元素最后一次的索引</title>
      <link href="/2018/02/15/javascript/array/lastIndexOf/"/>
      <url>/2018/02/15/javascript/array/lastIndexOf/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>lastIndexOf()方法用于查找给定元素在当前数组中最后一次出现的位置。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.lastIndexOf(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchElement任意类型要在数组中查找的元素。</span><br><span class="line">fromIndex可选/<span class="built_in">Number</span>类型 指定从数组中开始查找的索引位置。</span><br></pre></td></tr></table></figure><p>注意：<br>lastIndexOf()方法将从后向前查找给定元素，并返回给定元素第一次出现的位置。因为是从后向前搜索，第一次出现的位置就是该元素在当前数组中最后一次出现的位置。</p><p>如果不指定 fromIndex 值，则从最后一个元素开始搜索整个数组。<br>如果 fromIndex 的值大于数组长度，则意味查找整个数组，从最后一个元素开始搜索整个数组。<br>如果 fromIndex 为负值，则表示从数组中的倒数第几个元素开始查找，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。即使该值为负，数组仍然会被从后向前查找。为负值时可视为length + start，此处length为数组的长度。<br>如果length + start仍然为负，则意味数组不会被查找，返回 -1。</p><p><strong>返回值</strong></p><p>lastIndexOf()方法的返回值为Number类型，返回给定元素在数组中最后一次被查找到的索引值，如果没有找到则返回 -1 。</p><p>注意：<br>lastIndexOf()方法使用严格等于(“===”)判断 searchElement与数组中元素之间的等于关系。</p><p><strong>示例</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array = [2, 5, 9, 2];</span><br><span class="line">var <span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>);    // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">7</span>);        // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">3</span>);     // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">2</span>);     // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">-2</span>);    // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">-1</span>);    // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>使用lastIndexOf()查找到一个元素在数组中所有的索引，并使用push()将所有添加到另一个数组中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indices = [];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">array</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> element = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> idx = <span class="keyword">array</span>.lastIndexOf(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (idx != <span class="number">-1</span>) &#123;</span><br><span class="line">  indices.push(idx);</span><br><span class="line">  idx = (idx &gt; <span class="number">0</span> ? <span class="keyword">array</span>.lastIndexOf(element, idx - <span class="number">1</span>) : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(indices);</span><br><span class="line"><span class="comment">// [4, 2, 0];</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.lastIndexOf) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.lastIndexOf = <span class="function"><span class="keyword">function</span>(<span class="params">searchElement <span class="regexp">/*, fromIndex*/</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n, k,</span><br><span class="line">        t = <span class="built_in">Object</span>(<span class="keyword">this</span>),</span><br><span class="line">        len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      n = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (n != n) &#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (n != <span class="number">0</span> &amp;&amp; n != (<span class="number">1</span> / <span class="number">0</span>) &amp;&amp; n != -(<span class="number">1</span> / <span class="number">0</span>)) &#123;</span><br><span class="line">        n = (n &gt; <span class="number">0</span> || <span class="number">-1</span>) * <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.abs(n));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = n &gt;= <span class="number">0</span></span><br><span class="line">          ? <span class="built_in">Math</span>.min(n, len - <span class="number">1</span>)</span><br><span class="line">          : len - <span class="built_in">Math</span>.abs(n); k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> t &amp;&amp; t[k] === searchElement) &#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>forEach()数组循环</title>
      <link href="/2018/02/14/javascript/array/forEach/"/>
      <url>/2018/02/14/javascript/array/forEach/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>forEach()方法让数组中每个元素都执行一次给定的函数</p><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">forEach</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：<br>forEach()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为forEach()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item); &#125;)  <span class="comment">//依次打印 1 2 4 5 6</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>forEach()仅仅遍历数组每个元素执行一次 callback 函数，它没有返回内容。这一点和map()方法、some()方法、every()方法不同。如果打印forEach()方法返回内容，会出现undefined。</p><p>forEach()不会改变原数组。</p><p>forEach()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用forEach()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是forEach()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span> <span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">  console.log(element.toUpperCase());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">letters.forEach(<span class="function"><span class="keyword">fun</span>);  //  依次打印出  A   B   C</span></span><br></pre></td></tr></table></figure><p>上面有说到forEach()方法不返回任何内容。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span> <span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.toUpperCase();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(letters.forEach(<span class="function"><span class="keyword">fun</span>));       //打印结果  undefined</span></span><br></pre></td></tr></table></figure><p>如有需要，可使用map()方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span> <span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.toUpperCase();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(letters.map(<span class="function"><span class="keyword">fun</span>));           // ["A", "B", "C"]</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Production steps of ECMA-262, Edition 5, 15.4.4.18</span></span><br><span class="line"><span class="comment">// Reference: http://es5.github.com/#x15.4.4.18</span></span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">Array</span>.prototype.forEach ) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params"> callback, thisArg </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> T, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span> == <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( <span class="string">"this is null or not defined"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Let O be the result of calling ToObject passing the |this| value as the argument.</span></span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".</span></span><br><span class="line">    <span class="comment">// 3. Let len be ToUint32(lenValue).</span></span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. If IsCallable(callback) is false, throw a TypeError exception.</span></span><br><span class="line">    <span class="comment">// See: http://es5.github.com/#x9.11</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> callback !== <span class="string">"function"</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( callback + <span class="string">" is not a function"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">      T = thisArg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. Let k be 0</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. Repeat, while k &lt; len</span></span><br><span class="line">    <span class="keyword">while</span>( k &lt; len ) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> kValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// a. Let Pk be ToString(k).</span></span><br><span class="line">      <span class="comment">//   This is implicit for LHS operands of the in operator</span></span><br><span class="line">      <span class="comment">// b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.</span></span><br><span class="line">      <span class="comment">//   This step can be combined with c</span></span><br><span class="line">      <span class="comment">// c. If kPresent is true, then</span></span><br><span class="line">      <span class="keyword">if</span> ( k <span class="keyword">in</span> O ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i. Let kValue be the result of calling the Get internal method of O with argument Pk.</span></span><br><span class="line">        kValue = O[ k ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ii. Call the Call internal method of callback with T as the this value and</span></span><br><span class="line">        <span class="comment">// argument list containing kValue, k, and O.</span></span><br><span class="line">        callback.call( T, kValue, k, O );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// d. Increase k by 1.</span></span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 8. return undefined</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>filter()检测数组</title>
      <link href="/2018/02/13/javascript/array/filter/"/>
      <url>/2018/02/13/javascript/array/filter/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>filter()方法对数组中的每一项元素执行给定函数，并返回一个由执行该函数时返回 true 的元素组成的新数组。</p><p><strong>语法</strong></p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">filter</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：<br>filter()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为filter()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>filter()方法的 callback 回调函数需要有返回值，这个返回值不必明确是布尔值类型 true 或 false。如果 callback 没有返回值，则视为返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item) &#125;);</span><br><span class="line"> <span class="comment">// arr1为空数组       // 打印 0 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item &#125;);</span><br><span class="line"> <span class="comment">// arr2为 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item == <span class="literal">undefined</span> &#125;)  <span class="comment">// 空数组 []</span></span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &gt; <span class="number">0</span> &#125;)           <span class="comment">// [1, 2, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>filter()方法的返回值为Array类型，将原数组中每个元素执行一次 callback 函数，把每次执行后返回 true 的元素组合起来形成一个新数组，fliter()方法返回值就是这个新数组。如果素所有元素运行函数时都返回 false，则返回空数组 []。</p><p>filter()不会改变原数组。</p><p>filter()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用filter()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是filter()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提取出数组中大于等于 10 的元素</span></span><br><span class="line">function isBigEnough(element, index, array) &#123;</span><br><span class="line">  return (element &gt;= <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var passed = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>].filter(isBigEnough);</span><br><span class="line">console.log(passed)       <span class="comment">// 空数组 []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var passed1 = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter(isBigEnough);</span><br><span class="line">console.log(passed1)      <span class="comment">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把下面的代码插入到脚本的开头来解决低级IE的兼容。</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">"function"</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">var</span> val = t[i];</span><br><span class="line">        <span class="keyword">if</span> (fun.call(thisArg, val, i, t))</span><br><span class="line">          res.push(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>every()检测数组</title>
      <link href="/2018/02/12/javascript/array/every/"/>
      <url>/2018/02/12/javascript/array/every/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>every()方法对数组中的每一项元素执行给定函数，如果该函数对每一项都返回 true，则返回 true，否则返回 false</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">every</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对数组中每个元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：<br>every()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为every()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>every()方法的 callback 回调函数需要有返回值，这个返回值不必明确是布尔值类型 true 或 false。如果 callback 没有返回值，则视为返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item) &#125;);  <span class="comment">// 返回false。 只打印 1</span></span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &#125;);        <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item !== <span class="literal">undefined</span> &#125;); <span class="comment">// true</span></span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &gt; <span class="number">0</span> &#125;);           <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>every()方法的返回值为Boolean类型，将原数组中的每个元素都按顺序执行一次 callback 函数，如果每项元素执行结果都返回 true，则every()方法返回 true。只要有任何一项返回 false，every()方法就返回 false。</p><p>every()不会改变原数组。</p><p>every()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用every()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是every()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测数组中所有元素是否均大于等于10</span></span><br><span class="line">function isBigEnough(element, index, array) &#123;</span><br><span class="line">  return (element &gt;= <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</span><br><span class="line">console.log(passed)       <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var passed1 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</span><br><span class="line">console.log(passed1)      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把下面的代码插入到脚本的开头来解决低级IE的兼容。</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.every)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">'function'</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t &amp;&amp; !fun.call(thisArg, t[i], i, t))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>unshift()添加元素</title>
      <link href="/2018/02/11/javascript/array/unshift/"/>
      <url>/2018/02/11/javascript/array/unshift/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>unshift()方法用于向当前数组的开头位置添加一个或多个元素，并返回添加元素后数组长度</p><p><strong>语法</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.unshift(element1, <span class="params">...</span>, elementN)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">element1</span>任意类型添加到当前数组开头位置的元素。</span><br><span class="line">elementN可选/任意类型要添加到当前数组末开头位置的其他项，可以有多个。</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>unshift()方法的返回值为Number类型，返回添加元素后数组的长度。</p><p><strong>示例</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.unshift(<span class="string">"www"</span>,<span class="string">"com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="regexp">// 4</span></span><br><span class="line"><span class="regexp">console.log(arr);      //</span> [<span class="string">'www'</span>, <span class="string">'com'</span>, <span class="string">'萤光之烛'</span>, <span class="number">2018</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>splice()移除/替换数组</title>
      <link href="/2018/02/10/javascript/array/splice/"/>
      <url>/2018/02/10/javascript/array/splice/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>splice()方法用于从当前数组中移除一部分连续的元素。如有需要，还可以在所移除元素的位置上插入一个或多个新的元素。该方法以数组形式返回当前数组中被移除的元素</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">array</span><span class="selector-class">.splice</span>(<span class="selector-tag">start</span>, <span class="selector-tag">deleteCount</span>, <span class="selector-tag">item1</span>, <span class="selector-tag">item2</span>,..<span class="selector-class">.itemN</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">start</span><span class="keyword">Number</span>类型从数组中移除元素操作的起点索引。</span><br><span class="line">deleteCount<span class="keyword">Number</span>类型需要移除的元素个数。</span><br><span class="line">itemN可选/任意类型要添加到数组中元素被移除位置的新元素，可以有多个。</span><br></pre></td></tr></table></figure><p>注意:</p><p>splice()方法从索引 start 开始，移除 deleteCount 个元素(包含 start 索引元素)，在 start 索引处插入 itemN 。</p><p>如果 start &gt;= length ，则不会移除任何元素，返回一个空数组。<br>如果 start 是负值，则表示从数组的倒数第几位开始移除元素。可视为 length + start，此处length为数组的长度。<br>如果 deleteCount 为 0 或负数，则不会移除任何元素，返回一个空数组。<br>如果参数 itemN 为数组类型(Array)，仍会被当作一个元素看待，插入到当前数组中。</p><p><strong>返回值</strong></p><p>splice()方法的返回值为Array类型，返回当前数组中被移除的元素所组成的新数组。<br>当移除数组中的元素时，数组的length属性也会随之改变。一般而言，数组的length属性将会减N(N为实际移除的元素个数)。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>, <span class="number">-1024</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 2 开始，移除 3 个元素</span></span><br><span class="line"><span class="keyword">var</span> res = arr.splice(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);          <span class="comment">// ["萤光之烛", 2018, 10] </span></span><br><span class="line"><span class="built_in">console</span>.log(res);          <span class="comment">// [true, 1234, -1024]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 1 开始，移除 2 个元素，插入两个元素</span></span><br><span class="line"><span class="keyword">var</span> res1 = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'newitem1'</span>, <span class="string">'newitem2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);          <span class="comment">// ["萤光之烛", "newitem1", "newitem2"] </span></span><br><span class="line"><span class="built_in">console</span>.log(res1);         <span class="comment">// [2018, 10]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 1 开始，移除 0 个元素，插入两个元素</span></span><br><span class="line"><span class="keyword">var</span> res2 = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'abc'</span>, <span class="string">'xyz'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);          <span class="comment">// ["萤光之烛", "abc", "xyz", "newitem1", "newitem2"]        </span></span><br><span class="line"><span class="built_in">console</span>.log(res2);         <span class="comment">// 返回空数组 []</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sort()数组排序</title>
      <link href="/2018/02/09/javascript/array/sort/"/>
      <url>/2018/02/09/javascript/array/sort/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>sort()方法用于将当前数组对象的元素按指定顺序进行排序，并返回排序后的数组。</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">sort</span>(compareFunction)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareFunction可选/<span class="function"><span class="keyword">Function</span></span>类型指定如何比较元素顺序的函数。</span><br></pre></td></tr></table></figure><p>注意:</p><p>如果省略compareFunction参数，元素将按ASCII字符顺序的升序进行排列。<br>如果提供了compareFunction参数，那么数组会按照调用该函数的返回值排序。记 a 和 b 是两个将要被比较的元素：</p><p>如果 compareFunction(a, b) 小于 0 ， a 会被排列到 b 之前；<br>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变；<br>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。<br>sort()方法对数组如何排序完全取决于compareFunction函数，例如对数组[1,4,3,2,5] 排序。<br>升序，小的在前大的在后：compareFunction(a, b){return a-b}<br>降序，大的在前小的在后：compareFunction(a, b){return b-a}</p><p><strong>返回值</strong></p><p>sort()方法的返回值为Array类型，返回排序后的数组对象。<br>在排序过程中，并不会创建新的数组对象，返回的数组对象就是经过排序后的当前数组本身。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照ASCII字符顺序进行升序排列</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort());               <span class="comment">// [1234, 2018, "萤光之烛", true]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">14</span>];</span><br><span class="line"><span class="comment">//  升序排列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.sort(compareNumbers)) <span class="comment">// [2, 3, 5, 8, 12, 14]</span></span><br></pre></td></tr></table></figure><p>sort()方法可以使用函数表达式方便地书写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);         <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers);         <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>对象可以按照某个属性排序</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var items = [</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Edward'</span>, <span class="keyword">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Sharpe'</span>, <span class="keyword">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'And'</span>, <span class="keyword">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'The'</span>, <span class="keyword">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Magnetic'</span> , <span class="keyword">value</span>: <span class="number">99</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Zeros'</span>, <span class="keyword">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span></span> (a, b) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="keyword">value</span> &gt; b.<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="keyword">value</span> &lt; b.<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="number">0</span> : &#123;<span class="keyword">name</span>: <span class="string">"The"</span>, <span class="keyword">value</span>: -<span class="number">12</span>&#125;</span><br><span class="line">// <span class="number">1</span> : &#123;<span class="keyword">name</span>: <span class="string">"Edward"</span>, <span class="keyword">value</span>: <span class="number">21</span>&#125;</span><br><span class="line">// <span class="number">2</span> : &#123;<span class="keyword">name</span>: <span class="string">"Sharpe"</span>, <span class="keyword">value</span>: <span class="number">37</span>&#125;</span><br><span class="line">// <span class="number">3</span> : &#123;<span class="keyword">name</span>: <span class="string">"Zeros"</span>, <span class="keyword">value</span>: <span class="number">37</span>&#125;</span><br><span class="line">// <span class="number">4</span> : &#123;<span class="keyword">name</span>: <span class="string">"And"</span>, <span class="keyword">value</span>: <span class="number">45</span>&#125;</span><br><span class="line">// <span class="number">5</span> : &#123;<span class="keyword">name</span>: <span class="string">"Magnetic"</span>, <span class="keyword">value</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>slice()提取数组子元素</title>
      <link href="/2018/02/08/javascript/array/slice/"/>
      <url>/2018/02/08/javascript/array/slice/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>slice()方法把数组中一部分(连续的一段)提取复制到一个新的数组中，并返回这个新的数组。</p><p><strong>语法</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.slice(<span class="keyword">start</span>, <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span><span class="built_in">Number</span>类型从该索引处 (包含该索引元素) 开始提取原数组中元素。</span><br><span class="line"><span class="keyword">end</span>可选/<span class="built_in">Number</span>类型在该索引处 (不包含该索引元素) 结束提取原数组中元素。</span><br></pre></td></tr></table></figure><p>注意:</p><p>如果 start 为负，则表示从原数组中的倒数第几个元素开始提取，也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。为负时可视为length + start，此处length为数组的长度。<br>如果 end 为负，则表示从原数组中的倒数第几个元素结束提取，同上可视为length + end，此处length为数组的长度。<br>如果 end 被省略，则slice()会一直提取到原数组末尾。即end = length。<br>如果 end &lt;= start，则不会提取任何元素复制到新数组中，返回一个空数组。<br>如果 start和end 同时被省略，则从原数组索引 0 到最后一个元素完整提取，相当于浅复制整个数组。</p><p><strong>返回值</strong></p><p>slice()方法的返回值为Array类型, 返回当前数组中索引 start (包含索引 start 元素) 到索引 end (不包括索引 end 元素)部分的元素组成的数组。<br>slice()方法不会改变调用它的数组。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arr = ['萤光之烛', <span class="number">2018</span>, true, <span class="number">1234</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取索引 1 , 3 的部分(不包括索引0,2)</span></span><br><span class="line">console.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>))       <span class="comment">// [2018, true]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// start 为负  等价于 -3 + length = 1</span></span><br><span class="line">console.log(arr.slice(<span class="number">-3</span>,<span class="number">3</span>))      <span class="comment">// [2018, true]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略 end</span></span><br><span class="line">console.log(arr.slice(<span class="number">1</span>))         <span class="comment">// [2018, true, 1234]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//end &lt;= start 时返回空数组</span></span><br><span class="line">console.log(arr.slice(<span class="number">3</span>,<span class="number">2</span>))       <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数</span></span><br><span class="line">console.log(arr.slice())          <span class="comment">// ["萤光之烛", 2018, true, 1234]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shift()删除数组第一个元素</title>
      <link href="/2018/02/07/javascript/array/shift/"/>
      <url>/2018/02/07/javascript/array/shift/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>shift()方法用于从当前数组中移除第一个元素，并返回被移除的元素。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.shift()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong><br>shift()方法的返回值为任意类型，返回被移除的元素。如果该数组为空，则不改变这个空数组，返回undefined。</p><p>本方法会移除数组中的第一个元素，数组的length属性也会随之减 1 (如果数组中有元素的话)。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">// 萤光之烛</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);       <span class="comment">// [2018, true, 1234]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptArray = [];</span><br><span class="line"><span class="keyword">var</span> res = emptArray.shift();</span><br><span class="line"><span class="built_in">console</span>.log(res);       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reverse()颠倒数组中元素的顺序</title>
      <link href="/2018/02/06/javascript/array/reverse/"/>
      <url>/2018/02/06/javascript/array/reverse/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>reverse()方法用于将当前数组的元素顺序全部反转，并返回元素顺序反转后的数组。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">reverse</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong><br>reverse()方法的返回值为Array类型，返回元素顺序被反转后的数组对象。</p><p>reverse()方法将当前数组对象中的元素按所在位置进行反转。在执行过程中，此方法并不创建新的Array对象，而是直接在当前对象上进行反转。返回的数组对象就是经过顺序反转后的当前对象。</p><p>如果数组是不连续的，reverse()方法将在数组中创建元素，这些元素将填充数组中的间隙。所创建的这些元素的值全部为undefined。</p><p><strong>示例</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">array</span> = ['萤光之烛', <span class="number">2018</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="built_in">var</span> res = <span class="built_in">array</span>.<span class="built_in">reverse</span>();</span><br><span class="line">console.<span class="built_in">log</span>(res);             // [<span class="literal">true</span>, <span class="number">2018</span>, '萤光之烛']</span><br><span class="line">console.<span class="built_in">log</span>(res === <span class="built_in">array</span>);   // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>push()末尾添加元素</title>
      <link href="/2018/02/05/javascript/array/push/"/>
      <url>/2018/02/05/javascript/array/push/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>push()方法用于向当前数组添加一个或多个元素，并返回添加元素后数组的长度。新元素会依次添加到数组的末尾</p><p><strong>语法</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.push(element1, <span class="params">...</span>, elementN)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">element1</span>任意类型添加到当前数组末尾处的元素。</span><br><span class="line">elementN可选/任意类型要添加到当前数组末尾处的其他项，可以有多个。</span><br></pre></td></tr></table></figure><p>注意：<br>如果添加的元素类型为数组类型(Array)，仍然会被当作一个元素看待。如果要合并两个数组，请使用concat()方法。</p><p><strong>返回值</strong><br>push()方法的返回值为Number类型，返回添加元素后数组的长度。</p><p><strong>示例</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.push(<span class="string">'萤光'</span>, <span class="string">'之烛'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="regexp">// 4</span></span><br><span class="line"><span class="regexp">console.log(arr);      //</span> [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="string">'萤光'</span>, <span class="string">'之烛'</span>]</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pop()删除最后一个元素</title>
      <link href="/2018/02/04/javascript/array/pop/"/>
      <url>/2018/02/04/javascript/array/pop/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>pop()方法用于从当前数组中移除最后一个元素，并返回被移除的元素。</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">pop</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong><br>pop()方法的返回值为任意类型，返回被移除的元素。如果该数组为空，则不改变这个空数组，返回undefined。<br>本方法会移除数组中的最后一个元素，数组的length属性也会随之减 1 (如果数组中有元素的话)。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);       <span class="comment">// ["萤光之烛", 2018, true]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptArray = [];</span><br><span class="line"><span class="keyword">var</span> res = emptArray.pop();</span><br><span class="line"><span class="built_in">console</span>.log(res);       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>join()元素分隔</title>
      <link href="/2018/02/03/javascript/array/join/"/>
      <url>/2018/02/03/javascript/array/join/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>join()方法将当前数组的所有元素以指定的分隔符连接起来组成字符串</p><p><strong>语法</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="keyword">join</span>(separator)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">separator可选/<span class="keyword">String</span>类型指定要使用的分隔符。</span><br></pre></td></tr></table></figure><p>注意：<br>如果参数为空(没有指定分隔符)则用默认逗号作为分隔符。<br>如果参数为空字符串则数组中元素直接相连。<br>参数应为String类型，如果不是，则会对参数调用toString()方法将其转为字符串。</p><p><strong>返回值</strong><br>join()方法的返回值为String类型，返回数组中所有元素以指定的分隔符连接起来所组成的字符串。如果数组中没有元素，则返回空字符串。</p><p><strong>示例</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">Array</span> = [<span class="string">'Tody'</span>, <span class="string">'Yestady'</span>, <span class="string">'Tomorrow'</span>];</span><br><span class="line"><span class="keyword">var</span> Array1 = <span class="keyword">Array</span>.join();         <span class="comment">// Array1 "Tody,Yestady,Tomorrow"</span></span><br><span class="line"><span class="keyword">var</span> Array2 = <span class="keyword">Array</span>.join(<span class="string">', '</span>);     <span class="comment">// Array2的值变为 "Tody, Yestady, Tomorrow"</span></span><br><span class="line"><span class="keyword">var</span> Array3 = <span class="keyword">Array</span>.join(<span class="string">' + '</span>);    <span class="comment">// Array3的值变为 "Tody + Yestady + Tomorrow"</span></span><br><span class="line"><span class="keyword">var</span> Array4 = <span class="keyword">Array</span>.join(<span class="string">''</span>);       <span class="comment">// Array4的值变为 "TodyYestadyTomorrow"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对&#123;&#125;调用toString()方法 </span></span><br><span class="line"><span class="keyword">var</span> Array5 = <span class="keyword">Array</span>.join(<span class="comment">&#123;&#125;</span>)        <span class="comment">// Array4的值变为 "Tody[object Object]Yestady[object Object]Tomorrow"</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>concat() 连接数组</title>
      <link href="/2018/02/02/javascript/array/concat/"/>
      <url>/2018/02/02/javascript/array/concat/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>concat()方法将传入的值与原数组合并，组成一个新的数组并返回，该方法不会改变调用它的数组。所有浏览器均支持该方法。</p><p><strong>语法</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.concat(<span class="keyword">value</span><span class="number">1</span>, <span class="keyword">value</span><span class="number">2</span>, ..., valueN)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">value</span><span class="number">1</span>可选/任意类型添加到当前数组末尾处的数据项。</span><br><span class="line">valueN可选/任意类型要添加到当前数组末尾处的其他项，可以有多个。</span><br></pre></td></tr></table></figure><p>注意：<br>如果参数为空，则返回一个当前数组的浅复制；<br>如果参数为数组类型(Array)，则将该参数数组中的所有元素依次拼接到当前数组的末尾；<br>如果是其他类型，则将其本身作为元素添加到当前数组的末尾处。</p><p><strong>返回值</strong><br>concat()方法的返回值为Array类型，返回由当前数组和其他项组合而成的新数组。concat()方法不会修改调用它的数组，而是将他们的每个元素复制一份放在组合成的新数组中。原数组中的元素有两种被复制的方式：</p><p>对象引用(引用类型数据)：concat()方法会复制对象引用放到组合的新数组中，原数组和新数组中的对象引用都指向同一个实际的对象，所以，当实际的对象被修改时，两个数组也同时会被修改。<br>字符串和数字值类型数据(是原始值，而不是包装原始值的 String 和 Number 对象)：concat() 方法会复制字符串和数字的值放到新数组中。</p><p><strong>示例</strong><br>将两个数组合并为新数组、将元素添加到数组。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">var arr2 = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>];</span><br><span class="line">var arr = arr1.concat(arr2);     // [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"萤光之烛"</span>, <span class="number">2018</span>]  // arr1和arr2不变</span><br><span class="line"></span><br><span class="line">var arr3 = arr1.concat(<span class="string">'javascript'</span>);    // [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"javascript"</span>]</span><br><span class="line">var arrs = [<span class="string">'abc'</span>, <span class="number">2018</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'萤光之烛'</span>];</span><br><span class="line">var array = arr1.concat(arrs);</span><br><span class="line">// [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"abc"</span>, <span class="number">2018</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">"萤光之烛"</span>]  这里拆分数组只拆了一层。</span><br></pre></td></tr></table></figure><p>完全复制(值类型)</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2018</span>, <span class="string">'萤光之烛'</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.concat();            // [<span class="number">2018</span>, <span class="string">"萤光之烛"</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p>浅复制(引用类型)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  domain: '萤光之烛',</span><br><span class="line">  year: 2015</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var arr1 = [1, 2, 3, obj];</span><br><span class="line"></span><br><span class="line">var newresult = arr1.concat();   // [1, 2, 3, Object]</span><br><span class="line">console.log(newresult[3].year)   // 2015</span><br><span class="line"></span><br><span class="line">obj.year = 2018;</span><br><span class="line"></span><br><span class="line">console.log(newresult[3].year)   // 2018</span><br><span class="line"></span><br><span class="line">var arr2 = [1, 2, [11, 22]];</span><br><span class="line">var arr3 = arr2.concat();</span><br><span class="line">arr2[<span class="string">2</span>][<span class="symbol">0</span>] = '萤光之烛';</span><br><span class="line">console.log(arr3[<span class="string">2</span>][<span class="symbol">0</span>])          // 2018</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript Array 对象的属性和方法</title>
      <link href="/2018/02/01/javascript/array/array/"/>
      <url>/2018/02/01/javascript/array/array/</url>
      <content type="html"><![CDATA[<p> Array对象用于存储多个数据项，数据可以是任意类型</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span> 对象的属性</span><br><span class="line"><span class="function"><span class="keyword">constructor</span> 返回创建该对象的构造函数。</span></span><br><span class="line"><span class="function"><span class="title">length</span> 设置或返回数组中元素的个数。</span></span><br><span class="line"><span class="function"><span class="title">prototype</span> 返回创建该对象的函数的原型对象</span></span><br></pre></td></tr></table></figure><hr><p> Array 对象的方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Array 构造一个新的 Array 对象。</span><br><span class="line"><span class="function"><span class="title">concat</span><span class="params">()</span></span> 连接两个或更多的对象或数组，并返回拼接后的新数组。</span><br><span class="line"><span class="function"><span class="title">join</span><span class="params">()</span></span>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span><br><span class="line"><span class="function"><span class="title">pop</span><span class="params">()</span></span>删除并返回数组的最后一个元素。</span><br><span class="line"><span class="function"><span class="title">push</span><span class="params">()</span></span>向数组的末尾添加一个或更多元素，并返回新的数组长度。</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">()</span></span>颠倒数组中元素的顺序。</span><br><span class="line"><span class="function"><span class="title">shift</span><span class="params">()</span></span>删除并返回数组的第一个元素。</span><br><span class="line"><span class="function"><span class="title">slice</span><span class="params">()</span></span>以数组的形式返回当前数组中的一部分(连续的一部分)。</span><br><span class="line"><span class="function"><span class="title">sort</span><span class="params">()</span></span>对数组的元素进行排序，可以自定义排序方式。</span><br><span class="line"><span class="function"><span class="title">splice</span><span class="params">()</span></span>移除数组中的元素，也可同时向数组中添加一个或多个新元素。</span><br><span class="line"><span class="function"><span class="title">toString</span><span class="params">()</span></span>把数组转换为字符串，并返回该字符串。</span><br><span class="line"><span class="function"><span class="title">toLocaleString</span><span class="params">()</span></span>把数组转换为”本地化”的字符串，并返回该字符串。</span><br><span class="line"><span class="function"><span class="title">unshift</span><span class="params">()</span></span>向数组的开头添加一个或多个元素，并返回新的数组长度。</span><br><span class="line"><span class="function"><span class="title">valueOf</span><span class="params">()</span></span>返回数组对象的原始值。</span><br><span class="line"><span class="function"><span class="title">isArray</span><span class="params">()</span></span>判断某个值是否为数组。</span><br><span class="line"><span class="function"><span class="title">indexOf</span><span class="params">()</span></span>查找元素在数组中第一次出现的索引值。</span><br><span class="line"><span class="function"><span class="title">lastIndexOf</span><span class="params">()</span></span>从后向前查找元素，返回元素在数组中最后一次出现的索引值。</span><br><span class="line"><span class="function"><span class="title">every</span><span class="params">()</span></span>测试数组中所有元素是否都通过指定函数的测试。</span><br><span class="line"><span class="function"><span class="title">some</span><span class="params">()</span></span>测试数组中是否有元素通过指定函数的测试。</span><br><span class="line"><span class="function"><span class="title">forEach</span><span class="params">()</span></span>让数组每一项都执行一次给定函数。</span><br><span class="line"><span class="function"><span class="title">map</span><span class="params">()</span></span>对数组中每个元素调用一个指定函数后返回值组成的新数组。</span><br><span class="line"><span class="function"><span class="title">filter</span><span class="params">()</span></span>使用指定的函数测试所有元素，返回一个包含所有通过测试的元素的新数组。</span><br><span class="line"><span class="function"><span class="title">reduce</span><span class="params">()</span></span>迭代数组所有项，构建一个最终返回值。</span><br><span class="line"><span class="function"><span class="title">reduceright</span><span class="params">()</span></span>从最后一项开始向前迭代所有项，构建一个返回值。</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
