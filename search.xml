<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>sublime</title>
      <link href="/2018/05/09/sublime/theme/"/>
      <url>/2018/05/09/sublime/theme/</url>
      <content type="html"><![CDATA[<ul><li>主题</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主题官网 <span class="keyword">https</span>://scotch.io/bar-talk/best-sublime-<span class="keyword">text</span><span class="number">-3</span>-themes-<span class="keyword">of</span><span class="number">-2015</span>-<span class="keyword">and</span><span class="number">-2016</span></span><br><span class="line">好看的主题</span><br><span class="line">material design</span><br><span class="line">theme-spacegray</span><br><span class="line">monokai</span><br><span class="line">material theme  </span><br><span class="line"><span class="keyword">https</span>://equinsuocha.io/material-theme/<span class="comment">#/default</span></span><br></pre></td></tr></table></figure><ul><li><p>配置本地服务器</p><ul><li>打开Sublime,使用快捷键【Ctrl + Shift + P】或者点击“Preferences”=&gt; “Package controll”进入到插件安装面板</li><li>接着输入命令“Install Package”</li><li>输入插件名”sublimeserver”</li></ul></li><li><p>编辑器设置</p><ul><li>preferences 下面的settings；</li><li>“save_on_focus_lost”: true,  失去焦点自动保存</li><li>“theme”: “Material-Theme.sublime-theme”  主题</li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo备份</title>
      <link href="/2018/05/09/hexo/backup/"/>
      <url>/2018/05/09/hexo/backup/</url>
      <content type="html"><![CDATA[<p><code>备份以github为例子</code></p><ul><li><strong>创建主分支master 和 分支 backup</strong><br>master用来存放博客资源，好像只有master才可以开启page<br>在.gitignore文件中，把你的项目名称添加进去，默认设为不提交。如： blog<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">blog/</span><br></pre></td></tr></table></figure></li></ul><p>在主题设置提交代码设置为master<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: </span><br><span class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:ppoti/Blog.git,master</span><br></pre></td></tr></table></figure></p><ul><li><strong>设置backup为默认分支</strong><br>backup用来存放主题，和写的文章图片等等<br>分支backup设置默认，默认，默认！！！<br><code>默认</code>拉取backup分支，一键npm install即可还原。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo图片引入</title>
      <link href="/2018/04/25/hexo/images/"/>
      <url>/2018/04/25/hexo/images/</url>
      <content type="html"><![CDATA[<ul><li>根目录配置文件_config.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>安装一个可以上传本地图片的插件</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><ul><li>添加图片，new create会自动创建文件夹存放图片<ul><li>新建一个文件</li><li>hexo new aaa</li><li>新建文件aaa.md的同时也会创建aaa文件</li><li>图片放入aaa文件夹里面</li><li>图片引用代码如：</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">logo</span>](<span class="link">aaa/图片名字.png</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客功能</title>
      <link href="/2018/04/25/hexo/install/"/>
      <url>/2018/04/25/hexo/install/</url>
      <content type="html"><![CDATA[<h3 id="添加网站访问次数"><a href="#添加网站访问次数" class="headerlink" title="添加网站访问次数"></a>添加网站访问次数</h3><ul><li>以本主题为例！<br>进入网站  <a href="http://ibruce.info/2015/04/04/busuanzi/" target="blank">统计代码-不蒜子</a><br>总访问，找到<code>layout./_partial/footer.ejs</code> ,在 <code>&lt;/footer&gt;</code>上面添加即可</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单页访问次数：找到<code>layout./_partial/article.ejs</code>，<br>在<code>&lt;%- partial(&#39;post/title&#39;, {class_name: &#39;article-title&#39;}) %&gt;</code>后面添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"cloud-tie-join-count"</span> href=<span class="string">"javascript:void(0);"</span> style=<span class="string">"color:gray;font-size:14px;"</span>&gt;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-sort"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;span id=<span class="string">"busuanzi_container_page_pv"</span> style=<span class="string">"color:#ef7522;font-size:14px;"</span>&gt;</span><br><span class="line">            阅读数: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>次 &amp;nbsp;&amp;nbsp;</span><br><span class="line">  &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="添加来必力评论"><a href="#添加来必力评论" class="headerlink" title="添加来必力评论"></a>添加来必力评论</h3><pre><code>进入网站   &lt;a href=&quot;https://livere.com/&quot; target=&quot;blank&quot;&gt;来必力评论官网&lt;/a&gt;申请注册-激活-设置自己的网站</code></pre><p>找到<code>layout./_partial/post/nav.ejs</code>，在上面添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"MTAyMC8zNjM5NC8xMjkyOQ=="</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">       (<span class="function"><span class="keyword">function</span><span class="params">(d, s)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">           <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">           j = d.createElement(s);</span></span><br><span class="line"><span class="actionscript">           j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span></span><br><span class="line"><span class="actionscript">           j.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">           e.parentNode.insertBefore(j, e);</span></span><br><span class="line"><span class="javascript">       &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="添加文章导航目录"><a href="#添加文章导航目录" class="headerlink" title="添加文章导航目录"></a>添加文章导航目录</h3><p> 打开themes\yilia\source下的main.xxx.css文件，添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#container</span> <span class="selector-class">.show-toc-btn</span>,<span class="selector-id">#container</span> <span class="selector-class">.toc-article</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e3d9d9</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">129px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">11px</span> <span class="number">#a5e7ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-number</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-text</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2a6496</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc-level-1</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-class">.toc-child</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span> &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    60% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.01)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span> &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    60% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.01)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span> &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    60% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.01)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span> &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    60% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.01);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.01)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-toc-btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">6px</span> <span class="number">8px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-bg</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(img/show.png) no-repeat;</span><br><span class="line">    <span class="attribute">-webkit-background-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">-moz-background-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-bg</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ea8010</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开themes\yilia\layout_partial文件夹下的article.ejs文件<br>在<code>&lt;/header&gt; &lt;% } %&gt;</code>后面加入如下内容（注意位置）</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 目录内容 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span> (!<span class="keyword">index</span> &amp;&amp; post.toc)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"show-toc-btn"</span> <span class="attr">id</span>=<span class="string">"show-toc-btn"</span> <span class="attr">onclick</span>=<span class="string">"showToc();"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn-text"</span>&gt;</span>文章导航<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"toc-article"</span> <span class="attr">class</span>=<span class="string">"toc-article"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"toc-close"</span> <span class="attr">class</span>=<span class="string">"toc-close"</span> <span class="attr">title</span>=<span class="string">"隐藏导航"</span> <span class="attr">onclick</span>=<span class="string">"showBtn();"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"toc-title"</span>&gt;</span>文章目录<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">- toc(post.content) </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">function showToc()&#123;</span></span><br><span class="line"><span class="xml">var toc_article = document.getElementById("toc-article");</span></span><br><span class="line"><span class="xml">var show_toc_btn = document.getElementById("show-toc-btn");</span></span><br><span class="line"><span class="xml">toc_article.setAttribute("style","display:block");</span></span><br><span class="line"><span class="xml">show_toc_btn.setAttribute("style","display:none");</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">function showBtn()&#123;</span></span><br><span class="line"><span class="xml">var toc_article = document.getElementById("toc-article");</span></span><br><span class="line"><span class="xml">var show_toc_btn = document.getElementById("show-toc-btn");</span></span><br><span class="line"><span class="xml">toc_article.setAttribute("style","display:none");</span></span><br><span class="line"><span class="xml">show_toc_btn.setAttribute("style","display:block");</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 目录内容结束 --&gt;</span></span></span><br></pre></td></tr></table></figure><p>若想要文章显示目录，在每篇文章开头加入：<code>toc: true</code></p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo静态资源博客搭建</title>
      <link href="/2018/04/25/hexo/hexo/"/>
      <url>/2018/04/25/hexo/hexo/</url>
      <content type="html"><![CDATA[<p>一，hexo install 安装<br>    安装好Git Nodejs<br>    通过git 安装hexo及常用命令</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g  <span class="comment">//安装Hexo</span></span><br><span class="line">hexo -v  <span class="comment">//检查hexo是否安装成功</span></span><br><span class="line">hexo init 'blog'<span class="comment">//初始化该文件夹 cd blog</span></span><br><span class="line">npm install <span class="comment">//安装所需要的组件</span></span><br><span class="line">hexo server <span class="comment">//开启服务器 简写hexo s</span></span><br><span class="line">hexo <span class="keyword">generate</span>  <span class="comment">//生成静态网页 简写hexo g</span></span><br><span class="line">hexo deploy <span class="comment">//开始部署coding、github  简写hexo d</span></span><br><span class="line">hexo s --debug <span class="comment">//调试模式</span></span><br><span class="line">hexo <span class="keyword">new</span> title <span class="comment">//创建一篇新文章</span></span><br><span class="line">hexo clean &amp;&amp; hexo <span class="keyword">generate</span> &amp;&amp; hexo deploy <span class="comment">//一键清除，生成，部署</span></span><br></pre></td></tr></table></figure><hr><p>二，部署配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: <span class="comment">//键值 : 后面带空格</span></span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: </span><br><span class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:xxx/Blog.git,master</span><br><span class="line">    <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:xxx/Blog.git,master</span><br></pre></td></tr></table></figure><hr><p>三，线上加载错乱的路径设置<br>github路径是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxx/Blog.git<br>在根目录设置root: /Blog/<br>一级域名，则不用</p><p><a href="http://naotu.baidu.com/file/ebb77d3d6b03273046a19c36e69a4b83" target="_blank" rel="noopener">个人在线的思维导图</a><br><img src="/2018/04/25/hexo/hexo/mind.png" alt="logo"><br>至于主题，喜欢折腾个自己喜欢的，next也不错，功能丰富，就是UI不够细致</p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git常用命令与配置</title>
      <link href="/2018/04/25/git/git/"/>
      <url>/2018/04/25/git/git/</url>
      <content type="html"><![CDATA[<p>一，配置私钥</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"user"</span>    <span class="comment">//设置名字</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span> <span class="string">"user@qq.com"</span>  <span class="comment">//设置邮箱  </span></span><br><span class="line">ssh-keygen -t rsa -C  <span class="comment">//三次回车即可生成 ssh key</span></span><br><span class="line">ssh-keygen  <span class="comment">//不同平台可以使用这个 ssh key</span></span><br><span class="line">cat ~/.ssh/id_rsa<span class="selector-class">.pub</span>  <span class="comment">//查看你的 public key</span></span><br></pre></td></tr></table></figure><hr><p>二，在gitee，coding，github添加你的key和ssh</p><ul><li>添加方法大同小异 个人 -&gt; 设置 -&gt; SSH 公钥 输入标题，以及public key，确认即可。</li></ul><hr><p>三，git和gitee项目关联</p><p>  提交仓库</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> . <span class="comment">//提交所有 </span></span><br><span class="line">git <span class="keyword">add</span> <span class="string">''</span>  <span class="comment">//提交单个</span></span><br><span class="line">git commit -m <span class="string">"first"</span>  <span class="comment">//提交时候设置的版本号</span></span><br><span class="line">git push <span class="comment">//提交 git push origin master</span></span><br><span class="line">git remote <span class="keyword">add</span> origin +<span class="string">"仓库地址"</span></span><br><span class="line">git remote -v <span class="comment">//查询权限</span></span><br><span class="line">git push --force origin master <span class="comment">//替换当前</span></span><br></pre></td></tr></table></figure><p>  提取仓库</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">//第一次拉取代码</span></span><br><span class="line"><span class="title">git</span> pull // 拉取代码 </span><br><span class="line">git fetch --all //下载远程的库</span><br><span class="line">git reset --hard origin/<span class="keyword">master</span> <span class="title">//强制与master</span>覆盖</span><br></pre></td></tr></table></figure><p>  分支</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch ''    <span class="comment">//新建分支</span></span><br><span class="line">git checkout ''  <span class="comment">//切换分支</span></span><br><span class="line">git pull    <span class="comment">//拉取分支到本地开发</span></span><br><span class="line">git branch   <span class="comment">//查看当前分支</span></span><br><span class="line">git branch -D '' <span class="comment">//删除分支</span></span><br><span class="line">git add . <span class="meta">&amp;&amp; git commit -m 'cont' &amp;&amp; git push  <span class="comment">//切换到分支,再提交内容，</span></span></span><br><span class="line">git checkout master <span class="meta">&amp;&amp; git merge origin/分支名 &amp;&amp; git push 切换到主分支,再合并分支</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型prototype和_proto_</title>
      <link href="/2018/04/11/javascript/object/prototype/"/>
      <url>/2018/04/11/javascript/object/prototype/</url>
      <content type="html"><![CDATA[<h5 id="prototype是什么"><a href="#prototype是什么" class="headerlink" title="prototype是什么"></a>prototype是什么</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span></span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>Javascript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 prototype 对象上。<br>这时所有实例的 type 属性和 sayName() 方法，<br>其实都是同一个内存地址，指向 prototype 对象，因此就提高了运行效率。</p><h5 id="constructor是什么"><a href="#constructor是什么" class="headerlink" title="constructor是什么"></a>constructor是什么</h5><p>任何函数都具有一个 prototype 属性，该属性是一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><h5 id="proto-是什么"><a href="#proto-是什么" class="headerlink" title="_proto_是什么"></a><code>_proto_</code>是什么</h5><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 prototype 对象的指针 <strong>proto</strong>。<br><code>__proto__</code>是浏览器使用的非标准属性。<code>prototype</code>是程序员使用的标准属性<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> instance </span>=<span class="built_in"> new </span>F()</span><br><span class="line">console.log(instance.__proto__ === F.prototype) // =&gt; true</span><br></pre></td></tr></table></figure></p><ul><li>任何函数都具有一个 prototype 属性，该属性是一个对象</li><li>构造函数的 prototype 对象默认都有一个 constructor 属性，指向 prototype 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 prototype 对象的指针 <strong>proto</strong></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><h5 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h5><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 person1.sayName() 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。<br>更简单的原型语法<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">'human'</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该示例中，我们将 Person.prototype 重置到了一个新的对象。<br>这样做的好处就是为 Person.prototype 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 constructor 成员。<br>所以，我们为了保持 constructor 的指向正确，建议的写法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: 'human',</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="原生对象的原型—所有函数都有-prototype-属性对象。"><a href="#原生对象的原型—所有函数都有-prototype-属性对象。" class="headerlink" title="原生对象的原型—所有函数都有 prototype 属性对象。"></a>原生对象的原型—所有函数都有 prototype 属性对象。</h6><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li></ul><h6 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h6><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p><p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p><h6 id="原型对象使用建议"><a href="#原型对象使用建议" class="headerlink" title="原型对象使用建议"></a>原型对象使用建议</h6><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 prototype 记得修正 constructor 的指向</li></ul><h6 id="一个很神奇的原型链"><a href="#一个很神奇的原型链" class="headerlink" title="一个很神奇的原型链"></a>一个很神奇的原型链</h6><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> var divObj=document.getElementById(<span class="string">"dv"</span>);</span><br><span class="line"> console.dir(divObj);</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"><span class="function"><span class="title">divObj</span>.__proto__----&gt;</span></span><br><span class="line">HTMLD<span class="function"><span class="title">ivElement</span>.prototype的__proto__---&gt;</span></span><br><span class="line">HTMLE<span class="function"><span class="title">lement</span>.prototype的__proto__----&gt;</span></span><br><span class="line">E<span class="function"><span class="title">lement</span>.prototype的__proto__----&gt;</span></span><br><span class="line">N<span class="function"><span class="title">ode</span>.prototype的__proto__----&gt;</span></span><br><span class="line">E<span class="function"><span class="title">ventTarget</span>.prototype的__proto__----&gt;</span></span><br><span class="line">Object.prototype没有__proto__,</span><br><span class="line">所以,Object.prototype中的__proto__是null</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建对象</title>
      <link href="/2018/04/10/javascript/object/create/"/>
      <url>/2018/04/10/javascript/object/create/</url>
      <content type="html"><![CDATA[<p>面向对象的设计思想是：</p><ul><li>抽象出 Class</li><li>根据 Class 创建 Instance</li><li>指挥 Instance 得结果</li></ul><p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p><p>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。<br><br></p><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><p>可以直接通过 new Object() 创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">'Jack'</span></span><br><span class="line">person.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><p><br></p><h5 id="字面量的方式"><a href="#字面量的方式" class="headerlink" title="字面量的方式"></a>字面量的方式</h5><p>每次创建通过 new Object() 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如要生成两个 person 实例对象, 这样写的代码太过冗余，重复性太高。<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><p><br></p><h5 id="简单方式的改进：工厂函数"><a href="#简单方式的改进：工厂函数" class="headerlink" title="简单方式的改进：工厂函数"></a>简单方式的改进：工厂函数</h5><p>可以写一个函数，解决代码重复问题：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> createPerson (<span class="keyword">name</span>, age) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">name</span>: <span class="keyword">name</span>,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span></span> () &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(this.<span class="keyword">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成实例对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="selector-tag">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><p><br></p><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>一种更优雅的工厂函数就是下面这样，构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</span><br><span class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多种继承</title>
      <link href="/2018/03/10/javascript/object/call/"/>
      <url>/2018/03/10/javascript/object/call/</url>
      <content type="html"><![CDATA[<ul><li>继承: 首先继承是一种关系,类(class)与类之间的关系,JS中没有类,但是可以通过构造函数模拟类,然后通过原型来实现继承</li><li>继承也是为了数据共享,js中的继承也是为了实现数据共享</li><li><p>多态:一个对象有不同的行为,或者是同一个行为针对不同的对象,产生不同的结果,要想有多态,就要先有继承,js中可以模拟多态,但是不会去使用,也不会模拟,</p><h5 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex,weight</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name=name;</span><br><span class="line"> <span class="keyword">this</span>.age=age;</span><br><span class="line"> <span class="keyword">this</span>.sex=sex;</span><br><span class="line"> <span class="keyword">this</span>.weight=weight;</span><br><span class="line">&#125;</span><br><span class="line">  Person.prototype.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"您好"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">score</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score=score;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//希望人的类别中的数据可以共享给学生---继承</span></span><br><span class="line">  Student.prototype=<span class="keyword">new</span> Person(<span class="string">"小明"</span>,<span class="number">10</span>,<span class="string">"男"</span>,<span class="string">"50kg"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> stu1=<span class="keyword">new</span> Student(<span class="string">"100"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(stu1.name,stu1.age,stu1.sex,stu1.weight,stu1.score);</span><br><span class="line">  stu1.sayHi();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu2=<span class="keyword">new</span> Student(<span class="string">"120"</span>);</span><br><span class="line">  stu2.name=<span class="string">"张三"</span>;</span><br><span class="line">  stu2.age=<span class="number">20</span>;</span><br><span class="line">  stu2.sex=<span class="string">"女"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(stu2.name,stu2.age,stu2.sex,stu2.weight,stu2.score);</span><br><span class="line">  stu2.sayHi();</span><br><span class="line">  <span class="keyword">var</span> stu3=<span class="keyword">new</span> Student(<span class="string">"130"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(stu3.name,stu3.age,stu3.sex,stu3.weight,stu3.score);</span><br><span class="line">  stu3.sayHi();</span><br></pre></td></tr></table></figure><ul><li>为了数据共享,改变原型指向,做到了继承—通过改变原型指向实现的继承</li><li>缺陷:因为改变原型指向的同时实现继承,直接初始化了属性，继承过来的属性的值都是一样的了,所以,这就是问题</li><li>只能重新调用对象的属性进行重新赋值,</li></ul><h5 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h5><pre><code>function Person(name, age, sex, weight) {  this.name = name;  this.age = age;  this.sex = sex;  this.weight = weight;}Person.prototype.sayHi = function () {  console.log(&quot;您好&quot;);};function Student(name,age,sex,weight,score) {  //借用构造函数  Person.call(this,name,age,sex,weight);  this.score = score;}var stu1 = new Student(&quot;小明&quot;,10,&quot;男&quot;,&quot;10kg&quot;,&quot;100&quot;);console.log(stu1.name, stu1.age, stu1.sex, stu1.weight, stu1.score);var stu2 = new Student(&quot;小红&quot;,20,&quot;女&quot;,&quot;20kg&quot;,&quot;120&quot;);console.log(stu2.name, stu2.age, stu2.sex, stu2.weight, stu2.score);var stu3 = new Student(&quot;小丽&quot;,30,&quot;妖&quot;,&quot;30kg&quot;,&quot;130&quot;);console.log(stu3.name, stu3.age, stu3.sex, stu3.weight, stu3.score);</code></pre><ul><li>借用构造函数:构造函数名字.call(当前对象,属性,属性,属性….);</li><li>解决了属性继承,并且值不重复的问题</li><li>缺陷:父级类别中的方法不能继承</li></ul><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><ul><li>原型实现继承</li><li>借用构造函数实现继承</li><li>组合继承:原型继承+借用构造函数继承</li><li>属性和方法都被继承了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name;</span><br><span class="line">  <span class="keyword">this</span>.age=age;</span><br><span class="line">  <span class="keyword">this</span>.sex=sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"阿涅哈斯诶呦"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,score</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//借用构造函数:属性值重复的问题</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>,name,age,sex);</span><br><span class="line">  <span class="keyword">this</span>.score=score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变原型指向----继承</span></span><br><span class="line">Student.prototype=<span class="keyword">new</span> Person();<span class="comment">//不传值</span></span><br><span class="line">Student.prototype.eat=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"吃东西"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> stu=<span class="keyword">new</span> Student(<span class="string">"小黑"</span>,<span class="number">20</span>,<span class="string">"男"</span>,<span class="string">"100分"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu.name,stu.age,stu.sex,stu.score);</span><br><span class="line">stu.sayHi();</span><br><span class="line">stu.eat();</span><br><span class="line"><span class="keyword">var</span> stu2=<span class="keyword">new</span> Student(<span class="string">"小黑黑"</span>,<span class="number">200</span>,<span class="string">"男人"</span>,<span class="string">"1010分"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu2.name,stu2.age,stu2.sex,stu2.score);</span><br><span class="line">stu2.sayHi();</span><br><span class="line">stu2.eat();</span><br></pre></td></tr></table></figure><h5 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h5><ul><li>把一个对象中的属性或者方法直接复制到另一个对象中</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> obj1=&#123;</span><br><span class="line">  name:<span class="string">"小糊涂"</span>,</span><br><span class="line">  age:<span class="number">20</span>,</span><br><span class="line">  sleep:function () &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"睡觉了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">var</span> obj2=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">var</span> <span class="built_in">key</span> <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">  obj2[<span class="built_in">key</span>]=obj1[<span class="built_in">key</span>];  //obj2[<span class="built_in">key</span>]=obj1.prototype[<span class="built_in">key</span>];</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(obj2.name);</span><br></pre></td></tr></table></figure><ul><li>原型作用: 数据共享 ，目的是:为了节省内存空间,</li><li>原型作用: 继承  目的是:为了节省内存空间</li><li>原型继承:改变原型的指向</li><li>借用构造函数继承:主要解决属性的问题</li><li>组合继承:原型继承+借用构造函数继承</li><li>既能解决属性问题,又能解决方法问题</li><li>拷贝继承:就是把对象中需要共享的属性或者犯法,直接遍历的方式复制到另一个对象中</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>some()检测数组</title>
      <link href="/2018/02/21/javascript/array/some/"/>
      <url>/2018/02/21/javascript/array/some/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>some()方法对数组中的每一项元素执行给定函数，如果该函数对任何一项返回 true，则返回 true，否则返回 false。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">some</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：</p><p>some()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为some()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>some()方法的 callback 回调函数需要有返回值，这个返回值不必明确是布尔值类型 true 或 false。如果 callback 没有返回值，则视为返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item) &#125;);  <span class="comment">// 返回false。 打印 1 2 3 4 5</span></span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &#125;);        <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);    <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item == <span class="literal">undefined</span> &#125;)  <span class="comment">// false</span></span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &gt; <span class="number">0</span> &#125;)           <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>some()方法的返回值为Boolean类型，将原数组中的每个元素都按顺序执行一次 callback 函数，只要有任何一项元素执行结果返回 true，则some()方法返回 true。如果所有元素都返回 false，some()方法返回 false。</p><p>some()不会改变原数组。</p><p>some()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用some()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是some()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测数组中是否有元素大于等于 10</span></span><br><span class="line">function isBigEnough(element, index, array) &#123;</span><br><span class="line">  return (element &gt;= <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var passed = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>].some(isBigEnough);</span><br><span class="line">console.log(passed);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var passed1 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].some(isBigEnough);</span><br><span class="line">console.log(passed1);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.some)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.some = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">'function'</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t &amp;&amp; fun.call(thisArg, t[i], i, t))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reduceRight()倒序迭代</title>
      <link href="/2018/02/20/javascript/array/reduceRight/"/>
      <url>/2018/02/20/javascript/array/reduceRight/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>reduceRight()方法对数组中的每个元素（从右到左）开始执行给定函数，构建一个最终返回值。。reduceRight()方法和reduce()的执行方向相反。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.reduceRight(callback, initialValue)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="function"><span class="keyword">Function</span></span>类型对每个数组元素执行的回调函数。</span><br><span class="line">initialValue可选/任意类型作为首次调用 callback 的第一个参数。</span><br></pre></td></tr></table></figure><p>reduceRight()方法中的 callback 回调函数默认支持 4 个参数。</p><p>第 1 个(previousValue)： 上一次执行 callback 的返回值；<br>第 2 个(currentValue): 数组中当前被处理的元素；<br>第 3 个(index)： 当前被处理元素的索引值；<br>第 4 个(array)： 调用reduceRight()方法的数组本身。</p><p>首次执行 callback 函数时，如果指定了 initialValue ，则使用 initialValue 作为 callback 的第一个参数(previousValue)，数组中最后一个元素作为第二个参数(currentValue)；如果没指定 initialValue，则用数组的最后一个元素作为 previousValue，倒数第二个元素作为 currentValue。</p><p>如果数组为空并且没有提供 initialValue， 会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供 initialValue， 或者有提供 initialValue 但是数组为空，那么此唯一值将被返回并且callback不会被执行。</p><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">String</span>(pre) + <span class="built_in">String</span>(cur) &#125;)  <span class="comment">// "65421"</span></span><br></pre></td></tr></table></figure><p>每次的参数和返回值如下表：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index       array            return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">6</span>         <span class="number">5</span>     <span class="number">5</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">65</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">65</span>        <span class="number">4</span>     <span class="number">3</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">654</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">654</span>       <span class="number">2</span>     <span class="number">1</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">6542</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">6542</span>      <span class="number">1</span>     <span class="number">0</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">65421</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>reduceRight()方法的返回值为任意类型，从数组的最后一项开始，逐个遍历到第一个，由 callback 回调函数构建一个最终返回值。</p><p>reduceRight()不会改变原数组。</p><p><strong>示例</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduceRight(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123; <span class="keyword">return</span> a + b &#125;);     <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">迭代历程  previous current index   array  return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">4</span>         <span class="number">3</span>     <span class="number">3</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">7</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">7</span>         <span class="number">2</span>     <span class="number">2</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">9</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">9</span>         <span class="number">1</span>     <span class="number">1</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">10</span>        <span class="number">0</span>     <span class="number">0</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br></pre></td></tr></table></figure><p>给reduceRight()传入第二个参数 10 。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduceRight(function(a, b) &#123; return a + b &#125;, <span class="number">10</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index   array   return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">10</span>         <span class="number">4</span>     <span class="number">4</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">14</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">14</span>         <span class="number">3</span>     <span class="number">3</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">17</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">17</span>         <span class="number">2</span>     <span class="number">2</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">19</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">19</span>         <span class="number">1</span>     <span class="number">1</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">20</span></span><br><span class="line">第<span class="number">5</span>次调用     <span class="number">20</span>         <span class="number">0</span>     <span class="number">0</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">20</span></span><br></pre></td></tr></table></figure><p>将数组扁平化。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var flattened = <span class="string">[[0, 1], [2, 3], [4, 5]]</span>.reduceRight(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">concat</span>(b);</span><br><span class="line">&#125;);</span><br><span class="line">// flattened 为 [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previousValue  currentValue  index  array        return value</span><br><span class="line">第<span class="number">1</span>次调用    [<span class="number">4</span>, <span class="number">5</span>]         [<span class="number">2</span>, <span class="number">3</span>]       <span class="number">1</span>   [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">第<span class="number">2</span>次调用  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]     [<span class="number">0</span>, <span class="number">1</span>]       <span class="number">0</span>   [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> ( <span class="string">'function'</span> !== <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.reduceRight ) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.reduceRight = <span class="function"><span class="keyword">function</span>(<span class="params"> callback <span class="regexp">/*, initialValue*/</span> </span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">null</span> === <span class="keyword">this</span> || <span class="string">'undefined'</span> === <span class="keyword">typeof</span> <span class="keyword">this</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">         <span class="string">'Array.prototype.reduce called on null or undefined'</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">'function'</span> !== <span class="keyword">typeof</span> callback ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( callback + <span class="string">' is not a function'</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>( <span class="keyword">this</span> ), len = t.length &gt;&gt;&gt; <span class="number">0</span>, k = len - <span class="number">1</span>, value;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ) &#123;</span><br><span class="line">      value = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> ( k &gt;= <span class="number">0</span> &amp;&amp; ! k <span class="keyword">in</span> t ) k--;</span><br><span class="line">      <span class="keyword">if</span> ( k &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</span><br><span class="line">      value = t[ k-- ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( ; k &gt;= <span class="number">0</span> ; k-- ) &#123;</span><br><span class="line">      <span class="keyword">if</span> ( k <span class="keyword">in</span> t ) &#123;</span><br><span class="line">         value = callback( value, t[k], k, t );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reduce()迭代数组</title>
      <link href="/2018/02/19/javascript/array/reduce/"/>
      <url>/2018/02/19/javascript/array/reduce/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>reduce()方法对数组中的每个元素（从左到右）开始执行给定函数，构建一个最终返回值。reduce()是所有数组方法中最为复杂的一个。</p><p><strong>语法</strong></p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">reduce</span>(callback, initialValue)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="function"><span class="keyword">Function</span></span>类型对每个数组元素执行的回调函数。</span><br><span class="line">initialValue可选/任意类型作为首次调用 callback 的第一个参数。</span><br></pre></td></tr></table></figure><p>reduce()方法中的 callback 回调函数默认支持 4 个参数。</p><p>第 1 个(previousValue)： 上一次执行 callback 的返回值；<br>第 2 个(currentValue): 数组中当前被处理的元素；<br>第 3 个(index)： 当前被处理元素的索引值；<br>第 4 个(array)： 调用reduce()方法的数组本身。</p><p>首次执行 callback 函数时，如果指定了 initialValue ，则使用 initialValue 作为 callback 的第一个参数(previousValue)，数组中第一个元素作为第二个参数(currentValue)；如果没指定 initialValue，则用数组的第一个元素作为 previousValue，第二个元素作为 currentValue。</p><p>如果数组为空并且没有提供 initialValue， 会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供 initialValue， 或者有提供 initialValue 但是数组为空，那么此唯一值将被返回并且callback不会被执行。</p><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">String</span>(pre) + <span class="built_in">String</span>(cur) &#125;);  <span class="comment">// "12456"</span></span><br></pre></td></tr></table></figure><p>每次的参数和返回值如下表：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index       array            return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">1</span>         <span class="number">2</span>     <span class="number">1</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">12</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">12</span>        <span class="number">4</span>     <span class="number">3</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">124</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">124</span>       <span class="number">5</span>     <span class="number">4</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">1245</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">1245</span>      <span class="number">6</span>     <span class="number">5</span>   [<span class="number">1</span>,<span class="number">2</span>, undefined, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    <span class="number">12456</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>reduce()方法的返回值为任意类型，从数组的第一项开始，逐个遍历到最后，由 callback 函数构建一个最终返回值。</p><p>reduce()不会改变原数组。</p><p><strong>示例</strong></p><pre><code>var total = [0, 1, 2, 3, 4].reduce(function(a, b) { return a + b });     // 10</code></pre><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">迭代历程  previous current index       array    return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">0</span>         <span class="number">1</span>     <span class="number">1</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">1</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">1</span>         <span class="number">2</span>     <span class="number">2</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">3</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">3</span>         <span class="number">3</span>     <span class="number">3</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">6</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">6</span>         <span class="number">4</span>     <span class="number">4</span>       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br></pre></td></tr></table></figure><p>给reduce()传入第二个参数 10 。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(function(a, b) &#123; return a + b &#125;, <span class="number">10</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">迭代历程  previous current index  array    return value</span><br><span class="line">第<span class="number">1</span>次调用     <span class="number">10</span>        <span class="number">0</span>     <span class="number">0</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">10</span></span><br><span class="line">第<span class="number">2</span>次调用     <span class="number">10</span>        <span class="number">1</span>     <span class="number">1</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">11</span></span><br><span class="line">第<span class="number">3</span>次调用     <span class="number">11</span>        <span class="number">2</span>     <span class="number">2</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">13</span></span><br><span class="line">第<span class="number">4</span>次调用     <span class="number">13</span>        <span class="number">3</span>     <span class="number">3</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">16</span></span><br><span class="line">第<span class="number">5</span>次调用     <span class="number">16</span>        <span class="number">4</span>     <span class="number">4</span>   [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]    <span class="number">20</span></span><br></pre></td></tr></table></figure><p>将数组扁平化。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var flattened = <span class="string">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">concat</span>(b);</span><br><span class="line">&#125;);</span><br><span class="line">// flattened 为 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">迭代历程previousValuecurrentValueindexarrayreturn value</span><br><span class="line">第<span class="number">1</span>次调用   [<span class="number">0</span>, <span class="number">1</span>]          [<span class="number">2</span>, <span class="number">3</span>]          <span class="number">1</span>    [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">第<span class="number">2</span>次调用   [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    [<span class="number">4</span>, <span class="number">5</span>]          <span class="number">2</span>    [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'function'</span> !== <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.reduce) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, opt_initialValue</span>)</span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">this</span> || <span class="string">'undefined'</span> === <span class="keyword">typeof</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">// At the moment all modern browsers, that support strict mode, have</span></span><br><span class="line">      <span class="comment">// native implementation of Array.prototype.reduce. For instance, IE8</span></span><br><span class="line">      <span class="comment">// does not support strict mode, so this check is actually useless.</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">          <span class="string">'Array.prototype.reduce called on null or undefined'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'function'</span> !== <span class="keyword">typeof</span> callback) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">' is not a function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> index, value,</span><br><span class="line">        length = <span class="keyword">this</span>.length &gt;&gt;&gt; <span class="number">0</span>,</span><br><span class="line">        isValueSet = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">      value = opt_initialValue;</span><br><span class="line">      isValueSet = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; length &gt; index; ++index) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.hasOwnProperty(index)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValueSet) &#123;</span><br><span class="line">          value = callback(value, <span class="keyword">this</span>[index], index, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          value = <span class="keyword">this</span>[index];</span><br><span class="line">          isValueSet = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isValueSet) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>isArray()是否为数组</title>
      <link href="/2018/02/18/javascript/array/isArray/"/>
      <url>/2018/02/18/javascript/array/isArray/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>Array.isArray()方法用来判断某个值是否为数组。如果是，返回 true，否则返回 false。</p><p><strong>语法</strong></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.<span class="built_in">isArray</span>(value)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">value</span>任意类型需要被检测的值。</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>Array.isArray()方法的返回值为Boolean类型，被检测的值为数组返回 true，不是数组返回 false。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>indexOf()查找元素第一次的索引</title>
      <link href="/2018/02/17/javascript/array/indexOf/"/>
      <url>/2018/02/17/javascript/array/indexOf/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>indexOf()方法用于查找给定元素在当前数组中第一次出现的位置。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.indexOf(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchElement任意类型要在数组中查找的元素。</span><br><span class="line">fromIndex可选/<span class="built_in">Number</span>类型 指定从数组中开始查找的索引位置。</span><br></pre></td></tr></table></figure><p>注意：</p><p>如果 fromIndex 的值大于数组长度，则意味不在数组中查找，返回 -1。<br>如果 fromIndex 为负值，则表示从数组中的倒数第几个元素开始查找，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。为负值时可视为length + start，此处length为数组的长度。</p><p><strong>返回值</strong></p><p>indexOf()方法的返回值为Number类型，返回给定元素在数组中第一次被查找到的索引值，如果没有找到则返回 -1 。</p><p>注意：<br>indexOf()方法使用严格等于(“===”)判断 searchElement 与数组中元素之间的等于关系。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>);       <span class="comment">// 0</span></span><br><span class="line">array.indexOf(<span class="number">7</span>);       <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">2</span>);    <span class="comment">// 2</span></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-1</span>);   <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-3</span>);   <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">把下面的代码插入到脚本的开头来解决低级IE的兼容。</span><br><span class="line"><span class="comment">// Production steps of ECMA-262, Edition 5, 15.4.4.14</span></span><br><span class="line"><span class="comment">// Reference: http://es5.github.io/#x15.4.4.14</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">searchElement, fromIndex</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Let O be the result of calling ToObject passing</span></span><br><span class="line">    <span class="comment">//    the this value as the argument.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"this" is null or not defined'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Let lenValue be the result of calling the Get</span></span><br><span class="line">    <span class="comment">//    internal method of O with the argument "length".</span></span><br><span class="line">    <span class="comment">// 3. Let len be ToUint32(lenValue).</span></span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. If len is 0, return -1.</span></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. If argument fromIndex was passed let n be</span></span><br><span class="line">    <span class="comment">//    ToInteger(fromIndex); else let n be 0.</span></span><br><span class="line">    <span class="keyword">var</span> n = +fromIndex || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(n) === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">      n = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. If n &gt;= len, return -1.</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= len) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. If n &gt;= 0, then Let k be n.</span></span><br><span class="line">    <span class="comment">// 8. Else, n&lt;0, Let k be len - abs(n).</span></span><br><span class="line">    <span class="comment">//    If k is less than 0, then let k be 0.</span></span><br><span class="line">    k = <span class="built_in">Math</span>.max(n &gt;= <span class="number">0</span> ? n : len - <span class="built_in">Math</span>.abs(n), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. Repeat, while k &lt; len</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line">      <span class="comment">// a. Let Pk be ToString(k).</span></span><br><span class="line">      <span class="comment">//   This is implicit for LHS operands of the in operator</span></span><br><span class="line">      <span class="comment">// b. Let kPresent be the result of calling the</span></span><br><span class="line">      <span class="comment">//    HasProperty internal method of O with argument Pk.</span></span><br><span class="line">      <span class="comment">//   This step can be combined with c</span></span><br><span class="line">      <span class="comment">// c. If kPresent is true, then</span></span><br><span class="line">      <span class="comment">//    i.  Let elementK be the result of calling the Get</span></span><br><span class="line">      <span class="comment">//        internal method of O with the argument ToString(k).</span></span><br><span class="line">      <span class="comment">//   ii.  Let same be the result of applying the</span></span><br><span class="line">      <span class="comment">//        Strict Equality Comparison Algorithm to</span></span><br><span class="line">      <span class="comment">//        searchElement and elementK.</span></span><br><span class="line">      <span class="comment">//  iii.  If same is true, return k.</span></span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O &amp;&amp; O[k] === searchElement) &#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">      &#125;</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>map()返回新数组</title>
      <link href="/2018/02/16/javascript/array/map/"/>
      <url>/2018/02/16/javascript/array/map/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>map()方法返回一个由原数组中每个元素执行给定函数的返回值组成的新数组。</p><p><strong>语法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">map</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：</p><p>map()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为map()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>map()的 callback 函数需要有返回值，这些返回值组成新数组作为map()方法的返回值。如果回调函数没有返回值，则视为返回undefined。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.map(<span class="keyword">function</span>(item)&#123; <span class="built_in">console</span>.log(item) &#125;);</span><br><span class="line"><span class="regexp">//打印 0 1 2 3 4 5 //</span> arr1为[<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="regexp">//</span>  [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">arr.map(function(item)&#123; <span class="keyword">return</span> Boolean(item) &#125;)  <span class="regexp">//</span> [<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">undefined</span> × <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>map()方法的返回值为Array类型，对数组中的每个元素都按顺序执行一次 callback 函数，将每次执行 callback 的返回值组成一个新数组。这个新书组就是map()方法的返回值。</p><p>map()不会改变原数组。</p><p>map()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用map()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是map()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对数组中每个元素求平方</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrayOSquares = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item * item &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrayOSquares)       <span class="comment">// [1, 25, 64, 9, 16]</span></span><br></pre></td></tr></table></figure><p>一般情况下，map()方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着map()只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].<span class="built_in">map</span>(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 你可能觉的会是 [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 但实际的结果是 [1, NaN, NaN]</span></span><br></pre></td></tr></table></figure><p>通常使用parseInt()方法时，只需要传递一个参数。但实际上parseInt()可以有两个参数。第二个参数是进制数。可以通过语句”alert(parseInt.length)===2”来验证。map()方法在调用 callback 函数时，会给它传递三个参数：当前正在遍历的元素, 元素索引, 原数组本身。第三个参数parseInt()会忽视, 但第二个参数不会，也就是说，parseInt()把传过来的索引值当成进制数来使用。从而返回了NaN。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1"</span>,<span class="number">0</span>)   <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"2"</span>,<span class="number">1</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"3"</span>,<span class="number">2</span>)   <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, <span class="number">10</span>) &#125;);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 ECMA-262, Edition 5, 15.4.4.19</span></span><br><span class="line"><span class="comment">// 参考: http://es5.github.com/#x15.4.4.19</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.map) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> T, A, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">" this is null or not defined"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将O赋值为调用map方法的数组.</span></span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.将len赋值为数组O的长度.</span></span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果callback不是函数,则抛出TypeError异常.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(callback) != <span class="string">"[object Function]"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">" is not a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 如果参数thisArg有值,则将T赋值为thisArg;否则T为undefined.</span></span><br><span class="line">    <span class="keyword">if</span> (thisArg) &#123;</span><br><span class="line">      T = thisArg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 创建新数组A,长度为原数组O长度len</span></span><br><span class="line">    A = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 将k赋值为0</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 当 k &lt; len 时,执行循环.</span></span><br><span class="line">    <span class="keyword">while</span>(k &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> kValue, mappedValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历O,k为原数组索引</span></span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//kValue为索引k对应的值.</span></span><br><span class="line">        kValue = O[ k ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行callback,this指向T,参数有三个.分别是kValue:值,k:索引,O:原数组.</span></span><br><span class="line">        mappedValue = callback.call(T, kValue, k, O);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回值添加到新数组A中.</span></span><br><span class="line">        A[ k ] = mappedValue;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// k自增1</span></span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 返回新数组A</span></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lastIndexOf()查找元素最后一次的索引</title>
      <link href="/2018/02/15/javascript/array/lastIndexOf/"/>
      <url>/2018/02/15/javascript/array/lastIndexOf/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>lastIndexOf()方法用于查找给定元素在当前数组中最后一次出现的位置。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.lastIndexOf(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchElement任意类型要在数组中查找的元素。</span><br><span class="line">fromIndex可选/<span class="built_in">Number</span>类型 指定从数组中开始查找的索引位置。</span><br></pre></td></tr></table></figure><p>注意：<br>lastIndexOf()方法将从后向前查找给定元素，并返回给定元素第一次出现的位置。因为是从后向前搜索，第一次出现的位置就是该元素在当前数组中最后一次出现的位置。</p><p>如果不指定 fromIndex 值，则从最后一个元素开始搜索整个数组。<br>如果 fromIndex 的值大于数组长度，则意味查找整个数组，从最后一个元素开始搜索整个数组。<br>如果 fromIndex 为负值，则表示从数组中的倒数第几个元素开始查找，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。即使该值为负，数组仍然会被从后向前查找。为负值时可视为length + start，此处length为数组的长度。<br>如果length + start仍然为负，则意味数组不会被查找，返回 -1。</p><p><strong>返回值</strong></p><p>lastIndexOf()方法的返回值为Number类型，返回给定元素在数组中最后一次被查找到的索引值，如果没有找到则返回 -1 。</p><p>注意：<br>lastIndexOf()方法使用严格等于(“===”)判断 searchElement与数组中元素之间的等于关系。</p><p><strong>示例</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array = [2, 5, 9, 2];</span><br><span class="line">var <span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>);    // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">7</span>);        // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">3</span>);     // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">2</span>);     // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">-2</span>);    // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">index</span> = <span class="keyword">array</span>.lastIndexOf(<span class="number">2</span>, <span class="number">-1</span>);    // <span class="keyword">index</span> <span class="keyword">is</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>使用lastIndexOf()查找到一个元素在数组中所有的索引，并使用push()将所有添加到另一个数组中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indices = [];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">array</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> element = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> idx = <span class="keyword">array</span>.lastIndexOf(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (idx != <span class="number">-1</span>) &#123;</span><br><span class="line">  indices.push(idx);</span><br><span class="line">  idx = (idx &gt; <span class="number">0</span> ? <span class="keyword">array</span>.lastIndexOf(element, idx - <span class="number">1</span>) : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(indices);</span><br><span class="line"><span class="comment">// [4, 2, 0];</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.lastIndexOf) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.lastIndexOf = <span class="function"><span class="keyword">function</span>(<span class="params">searchElement <span class="regexp">/*, fromIndex*/</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n, k,</span><br><span class="line">        t = <span class="built_in">Object</span>(<span class="keyword">this</span>),</span><br><span class="line">        len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      n = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (n != n) &#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (n != <span class="number">0</span> &amp;&amp; n != (<span class="number">1</span> / <span class="number">0</span>) &amp;&amp; n != -(<span class="number">1</span> / <span class="number">0</span>)) &#123;</span><br><span class="line">        n = (n &gt; <span class="number">0</span> || <span class="number">-1</span>) * <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.abs(n));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = n &gt;= <span class="number">0</span></span><br><span class="line">          ? <span class="built_in">Math</span>.min(n, len - <span class="number">1</span>)</span><br><span class="line">          : len - <span class="built_in">Math</span>.abs(n); k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> t &amp;&amp; t[k] === searchElement) &#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>forEach()数组循环</title>
      <link href="/2018/02/14/javascript/array/forEach/"/>
      <url>/2018/02/14/javascript/array/forEach/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>forEach()方法让数组中每个元素都执行一次给定的函数</p><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">forEach</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：<br>forEach()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为forEach()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item); &#125;)  <span class="comment">//依次打印 1 2 4 5 6</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>forEach()仅仅遍历数组每个元素执行一次 callback 函数，它没有返回内容。这一点和map()方法、some()方法、every()方法不同。如果打印forEach()方法返回内容，会出现undefined。</p><p>forEach()不会改变原数组。</p><p>forEach()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用forEach()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是forEach()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span> <span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">  console.log(element.toUpperCase());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">letters.forEach(<span class="function"><span class="keyword">fun</span>);  //  依次打印出  A   B   C</span></span><br></pre></td></tr></table></figure><p>上面有说到forEach()方法不返回任何内容。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span> <span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.toUpperCase();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(letters.forEach(<span class="function"><span class="keyword">fun</span>));       //打印结果  undefined</span></span><br></pre></td></tr></table></figure><p>如有需要，可使用map()方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span> <span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.toUpperCase();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(letters.map(<span class="function"><span class="keyword">fun</span>));           // ["A", "B", "C"]</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Production steps of ECMA-262, Edition 5, 15.4.4.18</span></span><br><span class="line"><span class="comment">// Reference: http://es5.github.com/#x15.4.4.18</span></span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">Array</span>.prototype.forEach ) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params"> callback, thisArg </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> T, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span> == <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( <span class="string">"this is null or not defined"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Let O be the result of calling ToObject passing the |this| value as the argument.</span></span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".</span></span><br><span class="line">    <span class="comment">// 3. Let len be ToUint32(lenValue).</span></span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. If IsCallable(callback) is false, throw a TypeError exception.</span></span><br><span class="line">    <span class="comment">// See: http://es5.github.com/#x9.11</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> callback !== <span class="string">"function"</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( callback + <span class="string">" is not a function"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">      T = thisArg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. Let k be 0</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. Repeat, while k &lt; len</span></span><br><span class="line">    <span class="keyword">while</span>( k &lt; len ) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> kValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// a. Let Pk be ToString(k).</span></span><br><span class="line">      <span class="comment">//   This is implicit for LHS operands of the in operator</span></span><br><span class="line">      <span class="comment">// b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.</span></span><br><span class="line">      <span class="comment">//   This step can be combined with c</span></span><br><span class="line">      <span class="comment">// c. If kPresent is true, then</span></span><br><span class="line">      <span class="keyword">if</span> ( k <span class="keyword">in</span> O ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i. Let kValue be the result of calling the Get internal method of O with argument Pk.</span></span><br><span class="line">        kValue = O[ k ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ii. Call the Call internal method of callback with T as the this value and</span></span><br><span class="line">        <span class="comment">// argument list containing kValue, k, and O.</span></span><br><span class="line">        callback.call( T, kValue, k, O );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// d. Increase k by 1.</span></span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 8. return undefined</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>filter()检测数组</title>
      <link href="/2018/02/13/javascript/array/filter/"/>
      <url>/2018/02/13/javascript/array/filter/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>filter()方法对数组中的每一项元素执行给定函数，并返回一个由执行该函数时返回 true 的元素组成的新数组。</p><p><strong>语法</strong></p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">filter</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对每个数组元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型 指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：<br>filter()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为filter()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>filter()方法的 callback 回调函数需要有返回值，这个返回值不必明确是布尔值类型 true 或 false。如果 callback 没有返回值，则视为返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item) &#125;);</span><br><span class="line"> <span class="comment">// arr1为空数组       // 打印 0 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item &#125;);</span><br><span class="line"> <span class="comment">// arr2为 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item == <span class="literal">undefined</span> &#125;)  <span class="comment">// 空数组 []</span></span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &gt; <span class="number">0</span> &#125;)           <span class="comment">// [1, 2, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>filter()方法的返回值为Array类型，将原数组中每个元素执行一次 callback 函数，把每次执行后返回 true 的元素组合起来形成一个新数组，fliter()方法返回值就是这个新数组。如果素所有元素运行函数时都返回 false，则返回空数组 []。</p><p>filter()不会改变原数组。</p><p>filter()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用filter()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是filter()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提取出数组中大于等于 10 的元素</span></span><br><span class="line">function isBigEnough(element, index, array) &#123;</span><br><span class="line">  return (element &gt;= <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var passed = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>].filter(isBigEnough);</span><br><span class="line">console.log(passed)       <span class="comment">// 空数组 []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var passed1 = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter(isBigEnough);</span><br><span class="line">console.log(passed1)      <span class="comment">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把下面的代码插入到脚本的开头来解决低级IE的兼容。</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">"function"</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">var</span> val = t[i];</span><br><span class="line">        <span class="keyword">if</span> (fun.call(thisArg, val, i, t))</span><br><span class="line">          res.push(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JS数组方法 </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>every()检测数组</title>
      <link href="/2018/02/12/javascript/array/every/"/>
      <url>/2018/02/12/javascript/array/every/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>every()方法对数组中的每一项元素执行给定函数，如果该函数对每一项都返回 true，则返回 true，否则返回 false</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">every</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callback<span class="built_in">Function</span>类型对数组中每个元素执行的回调函数。</span><br><span class="line">thisArg可选/<span class="built_in">Object</span>类型指定回调函数内部的<span class="keyword">this</span>指向。</span><br></pre></td></tr></table></figure><p>注意：<br>every()方法中的 callback 回调函数默认支持 3 个参数，第 1 个是遍历的数组元素、第2个是元素对应的索引、第3个是数组本身。<br>如果为every()提供一个 thisArg 参数，该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入undefined。</p><p>every()方法的 callback 回调函数需要有返回值，这个返回值不必明确是布尔值类型 true 或 false。如果 callback 没有返回值，则视为返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="built_in">console</span>.log(item) &#125;);  <span class="comment">// 返回false。 只打印 1</span></span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &#125;);        <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [1, 2, undefined, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item !== <span class="literal">undefined</span> &#125;); <span class="comment">// true</span></span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item &gt; <span class="number">0</span> &#125;);           <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>every()方法的返回值为Boolean类型，将原数组中的每个元素都按顺序执行一次 callback 函数，如果每项元素执行结果都返回 true，则every()方法返回 true。只要有任何一项返回 false，every()方法就返回 false。</p><p>every()不会改变原数组。</p><p>every()遍历的元素的范围在第一次调用 callback 时就已经确定了。在调用every()后被添加到数组中的值不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是every()访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测数组中所有元素是否均大于等于10</span></span><br><span class="line">function isBigEnough(element, index, array) &#123;</span><br><span class="line">  return (element &gt;= <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</span><br><span class="line">console.log(passed)       <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var passed1 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</span><br><span class="line">console.log(passed1)      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把下面的代码插入到脚本的开头来解决低级IE的兼容。</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.every)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">'function'</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t &amp;&amp; !fun.call(thisArg, t[i], i, t))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>unshift()添加元素</title>
      <link href="/2018/02/11/javascript/array/unshift/"/>
      <url>/2018/02/11/javascript/array/unshift/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>unshift()方法用于向当前数组的开头位置添加一个或多个元素，并返回添加元素后数组长度</p><p><strong>语法</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.unshift(element1, <span class="params">...</span>, elementN)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">element1</span>任意类型添加到当前数组开头位置的元素。</span><br><span class="line">elementN可选/任意类型要添加到当前数组末开头位置的其他项，可以有多个。</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>unshift()方法的返回值为Number类型，返回添加元素后数组的长度。</p><p><strong>示例</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.unshift(<span class="string">"www"</span>,<span class="string">"com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="regexp">// 4</span></span><br><span class="line"><span class="regexp">console.log(arr);      //</span> [<span class="string">'www'</span>, <span class="string">'com'</span>, <span class="string">'萤光之烛'</span>, <span class="number">2018</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>splice()移除/替换数组</title>
      <link href="/2018/02/10/javascript/array/splice/"/>
      <url>/2018/02/10/javascript/array/splice/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>splice()方法用于从当前数组中移除一部分连续的元素。如有需要，还可以在所移除元素的位置上插入一个或多个新的元素。该方法以数组形式返回当前数组中被移除的元素</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">array</span><span class="selector-class">.splice</span>(<span class="selector-tag">start</span>, <span class="selector-tag">deleteCount</span>, <span class="selector-tag">item1</span>, <span class="selector-tag">item2</span>,..<span class="selector-class">.itemN</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">start</span><span class="keyword">Number</span>类型从数组中移除元素操作的起点索引。</span><br><span class="line">deleteCount<span class="keyword">Number</span>类型需要移除的元素个数。</span><br><span class="line">itemN可选/任意类型要添加到数组中元素被移除位置的新元素，可以有多个。</span><br></pre></td></tr></table></figure><p>注意:</p><p>splice()方法从索引 start 开始，移除 deleteCount 个元素(包含 start 索引元素)，在 start 索引处插入 itemN 。</p><p>如果 start &gt;= length ，则不会移除任何元素，返回一个空数组。<br>如果 start 是负值，则表示从数组的倒数第几位开始移除元素。可视为 length + start，此处length为数组的长度。<br>如果 deleteCount 为 0 或负数，则不会移除任何元素，返回一个空数组。<br>如果参数 itemN 为数组类型(Array)，仍会被当作一个元素看待，插入到当前数组中。</p><p><strong>返回值</strong></p><p>splice()方法的返回值为Array类型，返回当前数组中被移除的元素所组成的新数组。<br>当移除数组中的元素时，数组的length属性也会随之改变。一般而言，数组的length属性将会减N(N为实际移除的元素个数)。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>, <span class="number">-1024</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 2 开始，移除 3 个元素</span></span><br><span class="line"><span class="keyword">var</span> res = arr.splice(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);          <span class="comment">// ["萤光之烛", 2018, 10] </span></span><br><span class="line"><span class="built_in">console</span>.log(res);          <span class="comment">// [true, 1234, -1024]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 1 开始，移除 2 个元素，插入两个元素</span></span><br><span class="line"><span class="keyword">var</span> res1 = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'newitem1'</span>, <span class="string">'newitem2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);          <span class="comment">// ["萤光之烛", "newitem1", "newitem2"] </span></span><br><span class="line"><span class="built_in">console</span>.log(res1);         <span class="comment">// [2018, 10]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 1 开始，移除 0 个元素，插入两个元素</span></span><br><span class="line"><span class="keyword">var</span> res2 = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'abc'</span>, <span class="string">'xyz'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);          <span class="comment">// ["萤光之烛", "abc", "xyz", "newitem1", "newitem2"]        </span></span><br><span class="line"><span class="built_in">console</span>.log(res2);         <span class="comment">// 返回空数组 []</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sort()数组排序</title>
      <link href="/2018/02/09/javascript/array/sort/"/>
      <url>/2018/02/09/javascript/array/sort/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>sort()方法用于将当前数组对象的元素按指定顺序进行排序，并返回排序后的数组。</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">sort</span>(compareFunction)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareFunction可选/<span class="function"><span class="keyword">Function</span></span>类型指定如何比较元素顺序的函数。</span><br></pre></td></tr></table></figure><p>注意:</p><p>如果省略compareFunction参数，元素将按ASCII字符顺序的升序进行排列。<br>如果提供了compareFunction参数，那么数组会按照调用该函数的返回值排序。记 a 和 b 是两个将要被比较的元素：</p><p>如果 compareFunction(a, b) 小于 0 ， a 会被排列到 b 之前；<br>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变；<br>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。<br>sort()方法对数组如何排序完全取决于compareFunction函数，例如对数组[1,4,3,2,5] 排序。<br>升序，小的在前大的在后：compareFunction(a, b){return a-b}<br>降序，大的在前小的在后：compareFunction(a, b){return b-a}</p><p><strong>返回值</strong></p><p>sort()方法的返回值为Array类型，返回排序后的数组对象。<br>在排序过程中，并不会创建新的数组对象，返回的数组对象就是经过排序后的当前数组本身。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照ASCII字符顺序进行升序排列</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort());               <span class="comment">// [1234, 2018, "萤光之烛", true]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">14</span>];</span><br><span class="line"><span class="comment">//  升序排列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.sort(compareNumbers)) <span class="comment">// [2, 3, 5, 8, 12, 14]</span></span><br></pre></td></tr></table></figure><p>sort()方法可以使用函数表达式方便地书写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);         <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers);         <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>对象可以按照某个属性排序</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var items = [</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Edward'</span>, <span class="keyword">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Sharpe'</span>, <span class="keyword">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'And'</span>, <span class="keyword">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'The'</span>, <span class="keyword">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Magnetic'</span> , <span class="keyword">value</span>: <span class="number">99</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">name</span>: <span class="string">'Zeros'</span>, <span class="keyword">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span></span> (a, b) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="keyword">value</span> &gt; b.<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="keyword">value</span> &lt; b.<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="number">0</span> : &#123;<span class="keyword">name</span>: <span class="string">"The"</span>, <span class="keyword">value</span>: -<span class="number">12</span>&#125;</span><br><span class="line">// <span class="number">1</span> : &#123;<span class="keyword">name</span>: <span class="string">"Edward"</span>, <span class="keyword">value</span>: <span class="number">21</span>&#125;</span><br><span class="line">// <span class="number">2</span> : &#123;<span class="keyword">name</span>: <span class="string">"Sharpe"</span>, <span class="keyword">value</span>: <span class="number">37</span>&#125;</span><br><span class="line">// <span class="number">3</span> : &#123;<span class="keyword">name</span>: <span class="string">"Zeros"</span>, <span class="keyword">value</span>: <span class="number">37</span>&#125;</span><br><span class="line">// <span class="number">4</span> : &#123;<span class="keyword">name</span>: <span class="string">"And"</span>, <span class="keyword">value</span>: <span class="number">45</span>&#125;</span><br><span class="line">// <span class="number">5</span> : &#123;<span class="keyword">name</span>: <span class="string">"Magnetic"</span>, <span class="keyword">value</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>slice()提取数组子元素</title>
      <link href="/2018/02/08/javascript/array/slice/"/>
      <url>/2018/02/08/javascript/array/slice/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>slice()方法把数组中一部分(连续的一段)提取复制到一个新的数组中，并返回这个新的数组。</p><p><strong>语法</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.slice(<span class="keyword">start</span>, <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span><span class="built_in">Number</span>类型从该索引处 (包含该索引元素) 开始提取原数组中元素。</span><br><span class="line"><span class="keyword">end</span>可选/<span class="built_in">Number</span>类型在该索引处 (不包含该索引元素) 结束提取原数组中元素。</span><br></pre></td></tr></table></figure><p>注意:</p><p>如果 start 为负，则表示从原数组中的倒数第几个元素开始提取，也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。为负时可视为length + start，此处length为数组的长度。<br>如果 end 为负，则表示从原数组中的倒数第几个元素结束提取，同上可视为length + end，此处length为数组的长度。<br>如果 end 被省略，则slice()会一直提取到原数组末尾。即end = length。<br>如果 end &lt;= start，则不会提取任何元素复制到新数组中，返回一个空数组。<br>如果 start和end 同时被省略，则从原数组索引 0 到最后一个元素完整提取，相当于浅复制整个数组。</p><p><strong>返回值</strong></p><p>slice()方法的返回值为Array类型, 返回当前数组中索引 start (包含索引 start 元素) 到索引 end (不包括索引 end 元素)部分的元素组成的数组。<br>slice()方法不会改变调用它的数组。</p><p><strong>示例</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arr = ['萤光之烛', <span class="number">2018</span>, true, <span class="number">1234</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取索引 1 , 3 的部分(不包括索引0,2)</span></span><br><span class="line">console.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>))       <span class="comment">// [2018, true]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// start 为负  等价于 -3 + length = 1</span></span><br><span class="line">console.log(arr.slice(<span class="number">-3</span>,<span class="number">3</span>))      <span class="comment">// [2018, true]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略 end</span></span><br><span class="line">console.log(arr.slice(<span class="number">1</span>))         <span class="comment">// [2018, true, 1234]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//end &lt;= start 时返回空数组</span></span><br><span class="line">console.log(arr.slice(<span class="number">3</span>,<span class="number">2</span>))       <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数</span></span><br><span class="line">console.log(arr.slice())          <span class="comment">// ["萤光之烛", 2018, true, 1234]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shift()删除数组第一个元素</title>
      <link href="/2018/02/07/javascript/array/shift/"/>
      <url>/2018/02/07/javascript/array/shift/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>shift()方法用于从当前数组中移除第一个元素，并返回被移除的元素。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.shift()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong><br>shift()方法的返回值为任意类型，返回被移除的元素。如果该数组为空，则不改变这个空数组，返回undefined。</p><p>本方法会移除数组中的第一个元素，数组的length属性也会随之减 1 (如果数组中有元素的话)。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">// 萤光之烛</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);       <span class="comment">// [2018, true, 1234]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptArray = [];</span><br><span class="line"><span class="keyword">var</span> res = emptArray.shift();</span><br><span class="line"><span class="built_in">console</span>.log(res);       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reverse()颠倒数组中元素的顺序</title>
      <link href="/2018/02/06/javascript/array/reverse/"/>
      <url>/2018/02/06/javascript/array/reverse/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>reverse()方法用于将当前数组的元素顺序全部反转，并返回元素顺序反转后的数组。</p><p><strong>语法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">reverse</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong><br>reverse()方法的返回值为Array类型，返回元素顺序被反转后的数组对象。</p><p>reverse()方法将当前数组对象中的元素按所在位置进行反转。在执行过程中，此方法并不创建新的Array对象，而是直接在当前对象上进行反转。返回的数组对象就是经过顺序反转后的当前对象。</p><p>如果数组是不连续的，reverse()方法将在数组中创建元素，这些元素将填充数组中的间隙。所创建的这些元素的值全部为undefined。</p><p><strong>示例</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">array</span> = ['萤光之烛', <span class="number">2018</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="built_in">var</span> res = <span class="built_in">array</span>.<span class="built_in">reverse</span>();</span><br><span class="line">console.<span class="built_in">log</span>(res);             // [<span class="literal">true</span>, <span class="number">2018</span>, '萤光之烛']</span><br><span class="line">console.<span class="built_in">log</span>(res === <span class="built_in">array</span>);   // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>push()末尾添加元素</title>
      <link href="/2018/02/05/javascript/array/push/"/>
      <url>/2018/02/05/javascript/array/push/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>push()方法用于向当前数组添加一个或多个元素，并返回添加元素后数组的长度。新元素会依次添加到数组的末尾</p><p><strong>语法</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.push(element1, <span class="params">...</span>, elementN)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">element1</span>任意类型添加到当前数组末尾处的元素。</span><br><span class="line">elementN可选/任意类型要添加到当前数组末尾处的其他项，可以有多个。</span><br></pre></td></tr></table></figure><p>注意：<br>如果添加的元素类型为数组类型(Array)，仍然会被当作一个元素看待。如果要合并两个数组，请使用concat()方法。</p><p><strong>返回值</strong><br>push()方法的返回值为Number类型，返回添加元素后数组的长度。</p><p><strong>示例</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.push(<span class="string">'萤光'</span>, <span class="string">'之烛'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="regexp">// 4</span></span><br><span class="line"><span class="regexp">console.log(arr);      //</span> [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="string">'萤光'</span>, <span class="string">'之烛'</span>]</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pop()删除最后一个元素</title>
      <link href="/2018/02/04/javascript/array/pop/"/>
      <url>/2018/02/04/javascript/array/pop/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>pop()方法用于从当前数组中移除最后一个元素，并返回被移除的元素。</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">pop</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong><br>pop()方法的返回值为任意类型，返回被移除的元素。如果该数组为空，则不改变这个空数组，返回undefined。<br>本方法会移除数组中的最后一个元素，数组的length属性也会随之减 1 (如果数组中有元素的话)。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>, <span class="literal">true</span>, <span class="number">1234</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);       <span class="comment">// ["萤光之烛", 2018, true]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptArray = [];</span><br><span class="line"><span class="keyword">var</span> res = emptArray.pop();</span><br><span class="line"><span class="built_in">console</span>.log(res);       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>join()元素分隔</title>
      <link href="/2018/02/03/javascript/array/join/"/>
      <url>/2018/02/03/javascript/array/join/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>join()方法将当前数组的所有元素以指定的分隔符连接起来组成字符串</p><p><strong>语法</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="keyword">join</span>(separator)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">separator可选/<span class="keyword">String</span>类型指定要使用的分隔符。</span><br></pre></td></tr></table></figure><p>注意：<br>如果参数为空(没有指定分隔符)则用默认逗号作为分隔符。<br>如果参数为空字符串则数组中元素直接相连。<br>参数应为String类型，如果不是，则会对参数调用toString()方法将其转为字符串。</p><p><strong>返回值</strong><br>join()方法的返回值为String类型，返回数组中所有元素以指定的分隔符连接起来所组成的字符串。如果数组中没有元素，则返回空字符串。</p><p><strong>示例</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">Array</span> = [<span class="string">'Tody'</span>, <span class="string">'Yestady'</span>, <span class="string">'Tomorrow'</span>];</span><br><span class="line"><span class="keyword">var</span> Array1 = <span class="keyword">Array</span>.join();         <span class="comment">// Array1 "Tody,Yestady,Tomorrow"</span></span><br><span class="line"><span class="keyword">var</span> Array2 = <span class="keyword">Array</span>.join(<span class="string">', '</span>);     <span class="comment">// Array2的值变为 "Tody, Yestady, Tomorrow"</span></span><br><span class="line"><span class="keyword">var</span> Array3 = <span class="keyword">Array</span>.join(<span class="string">' + '</span>);    <span class="comment">// Array3的值变为 "Tody + Yestady + Tomorrow"</span></span><br><span class="line"><span class="keyword">var</span> Array4 = <span class="keyword">Array</span>.join(<span class="string">''</span>);       <span class="comment">// Array4的值变为 "TodyYestadyTomorrow"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对&#123;&#125;调用toString()方法 </span></span><br><span class="line"><span class="keyword">var</span> Array5 = <span class="keyword">Array</span>.join(<span class="comment">&#123;&#125;</span>)        <span class="comment">// Array4的值变为 "Tody[object Object]Yestady[object Object]Tomorrow"</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>concat() 连接数组</title>
      <link href="/2018/02/02/javascript/array/concat/"/>
      <url>/2018/02/02/javascript/array/concat/</url>
      <content type="html"><![CDATA[<p><strong>概述</strong><br>concat()方法将传入的值与原数组合并，组成一个新的数组并返回，该方法不会改变调用它的数组。所有浏览器均支持该方法。</p><p><strong>语法</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.concat(<span class="keyword">value</span><span class="number">1</span>, <span class="keyword">value</span><span class="number">2</span>, ..., valueN)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">value</span><span class="number">1</span>可选/任意类型添加到当前数组末尾处的数据项。</span><br><span class="line">valueN可选/任意类型要添加到当前数组末尾处的其他项，可以有多个。</span><br></pre></td></tr></table></figure><p>注意：<br>如果参数为空，则返回一个当前数组的浅复制；<br>如果参数为数组类型(Array)，则将该参数数组中的所有元素依次拼接到当前数组的末尾；<br>如果是其他类型，则将其本身作为元素添加到当前数组的末尾处。</p><p><strong>返回值</strong><br>concat()方法的返回值为Array类型，返回由当前数组和其他项组合而成的新数组。concat()方法不会修改调用它的数组，而是将他们的每个元素复制一份放在组合成的新数组中。原数组中的元素有两种被复制的方式：</p><p>对象引用(引用类型数据)：concat()方法会复制对象引用放到组合的新数组中，原数组和新数组中的对象引用都指向同一个实际的对象，所以，当实际的对象被修改时，两个数组也同时会被修改。<br>字符串和数字值类型数据(是原始值，而不是包装原始值的 String 和 Number 对象)：concat() 方法会复制字符串和数字的值放到新数组中。</p><p><strong>示例</strong><br>将两个数组合并为新数组、将元素添加到数组。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">var arr2 = [<span class="string">'萤光之烛'</span>, <span class="number">2018</span>];</span><br><span class="line">var arr = arr1.concat(arr2);     // [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"萤光之烛"</span>, <span class="number">2018</span>]  // arr1和arr2不变</span><br><span class="line"></span><br><span class="line">var arr3 = arr1.concat(<span class="string">'javascript'</span>);    // [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"javascript"</span>]</span><br><span class="line">var arrs = [<span class="string">'abc'</span>, <span class="number">2018</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'萤光之烛'</span>];</span><br><span class="line">var array = arr1.concat(arrs);</span><br><span class="line">// [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"abc"</span>, <span class="number">2018</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">"萤光之烛"</span>]  这里拆分数组只拆了一层。</span><br></pre></td></tr></table></figure><p>完全复制(值类型)</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2018</span>, <span class="string">'萤光之烛'</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.concat();            // [<span class="number">2018</span>, <span class="string">"萤光之烛"</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p>浅复制(引用类型)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  domain: '萤光之烛',</span><br><span class="line">  year: 2015</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var arr1 = [1, 2, 3, obj];</span><br><span class="line"></span><br><span class="line">var newresult = arr1.concat();   // [1, 2, 3, Object]</span><br><span class="line">console.log(newresult[3].year)   // 2015</span><br><span class="line"></span><br><span class="line">obj.year = 2018;</span><br><span class="line"></span><br><span class="line">console.log(newresult[3].year)   // 2018</span><br><span class="line"></span><br><span class="line">var arr2 = [1, 2, [11, 22]];</span><br><span class="line">var arr3 = arr2.concat();</span><br><span class="line">arr2[<span class="string">2</span>][<span class="symbol">0</span>] = '萤光之烛';</span><br><span class="line">console.log(arr3[<span class="string">2</span>][<span class="symbol">0</span>])          // 2018</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Array 对象的属性和方法</title>
      <link href="/2018/02/01/javascript/array/array/"/>
      <url>/2018/02/01/javascript/array/array/</url>
      <content type="html"><![CDATA[<p> Array对象用于存储多个数据项，数据可以是任意类型</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span> 对象的属性</span><br><span class="line"><span class="function"><span class="keyword">constructor</span> 返回创建该对象的构造函数。</span></span><br><span class="line"><span class="function"><span class="title">length</span> 设置或返回数组中元素的个数。</span></span><br><span class="line"><span class="function"><span class="title">prototype</span> 返回创建该对象的函数的原型对象</span></span><br></pre></td></tr></table></figure><hr><p> Array 对象的方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Array 构造一个新的 Array 对象。</span><br><span class="line"><span class="function"><span class="title">concat</span><span class="params">()</span></span> 连接两个或更多的对象或数组，并返回拼接后的新数组。</span><br><span class="line"><span class="function"><span class="title">join</span><span class="params">()</span></span>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span><br><span class="line"><span class="function"><span class="title">pop</span><span class="params">()</span></span>删除并返回数组的最后一个元素。</span><br><span class="line"><span class="function"><span class="title">push</span><span class="params">()</span></span>向数组的末尾添加一个或更多元素，并返回新的数组长度。</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">()</span></span>颠倒数组中元素的顺序。</span><br><span class="line"><span class="function"><span class="title">shift</span><span class="params">()</span></span>删除并返回数组的第一个元素。</span><br><span class="line"><span class="function"><span class="title">slice</span><span class="params">()</span></span>以数组的形式返回当前数组中的一部分(连续的一部分)。</span><br><span class="line"><span class="function"><span class="title">sort</span><span class="params">()</span></span>对数组的元素进行排序，可以自定义排序方式。</span><br><span class="line"><span class="function"><span class="title">splice</span><span class="params">()</span></span>移除数组中的元素，也可同时向数组中添加一个或多个新元素。</span><br><span class="line"><span class="function"><span class="title">toString</span><span class="params">()</span></span>把数组转换为字符串，并返回该字符串。</span><br><span class="line"><span class="function"><span class="title">toLocaleString</span><span class="params">()</span></span>把数组转换为”本地化”的字符串，并返回该字符串。</span><br><span class="line"><span class="function"><span class="title">unshift</span><span class="params">()</span></span>向数组的开头添加一个或多个元素，并返回新的数组长度。</span><br><span class="line"><span class="function"><span class="title">valueOf</span><span class="params">()</span></span>返回数组对象的原始值。</span><br><span class="line"><span class="function"><span class="title">isArray</span><span class="params">()</span></span>判断某个值是否为数组。</span><br><span class="line"><span class="function"><span class="title">indexOf</span><span class="params">()</span></span>查找元素在数组中第一次出现的索引值。</span><br><span class="line"><span class="function"><span class="title">lastIndexOf</span><span class="params">()</span></span>从后向前查找元素，返回元素在数组中最后一次出现的索引值。</span><br><span class="line"><span class="function"><span class="title">every</span><span class="params">()</span></span>测试数组中所有元素是否都通过指定函数的测试。</span><br><span class="line"><span class="function"><span class="title">some</span><span class="params">()</span></span>测试数组中是否有元素通过指定函数的测试。</span><br><span class="line"><span class="function"><span class="title">forEach</span><span class="params">()</span></span>让数组每一项都执行一次给定函数。</span><br><span class="line"><span class="function"><span class="title">map</span><span class="params">()</span></span>对数组中每个元素调用一个指定函数后返回值组成的新数组。</span><br><span class="line"><span class="function"><span class="title">filter</span><span class="params">()</span></span>使用指定的函数测试所有元素，返回一个包含所有通过测试的元素的新数组。</span><br><span class="line"><span class="function"><span class="title">reduce</span><span class="params">()</span></span>迭代数组所有项，构建一个最终返回值。</span><br><span class="line"><span class="function"><span class="title">reduceright</span><span class="params">()</span></span>从最后一项开始向前迭代所有项，构建一个返回值。</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
